<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2016-08-04T12:10:09+00:00</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[currency-symbol-map]]></title>
    <link href="http://nmotw.in/currency-symbol-map/"/>
    <updated>2016-08-04T11:52:51+00:00</updated>
    <id>http://nmotw.in/currency-symbol-map</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/currency-symbol-map">currency-symbol-map</a></h1>

<blockquote><p>Lookup the currency symbol for a given currency code.</p></blockquote>

<p>Name says it all, this is tiny module that's helps one to get the symbol for a given currency or get the currency got given a symbol.</p>

<p><strong>Get it:</strong> <code>npm install --save currency-symbol-map</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">getSymbolFromCurrency</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;currency-symbol-map&#39;</span><span class="p">).</span><span class="nx">getSymbolFromCurrency</span><span class="p">;</span>
</span><span class='line'><span class="nx">getSymbolFromCurrency</span><span class="p">(</span><span class="s1">&#39;USD&#39;</span><span class="p">);</span> <span class="c1">//=&gt; &#39;$&#39; </span>
</span><span class='line'><span class="nx">getSymbolFromCurrency</span><span class="p">(</span><span class="s1">&#39;NOT A VALID CODE&#39;</span><span class="p">);</span> <span class="c1">//=&gt; undefined </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">getCurrencyFromSymbol</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;currency-symbol-map&#39;</span><span class="p">).</span><span class="nx">getCurrencyFromSymbol</span><span class="p">;</span>
</span><span class='line'><span class="nx">getCurrencyFromSymbol</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">);</span> <span class="c1">//=&gt; &#39;USD&#39; </span>
</span><span class='line'><span class="nx">getCurrencyFromSymbol</span><span class="p">(</span><span class="s1">&#39;NOT A VALID CODE&#39;</span><span class="p">);</span> <span class="c1">//=&gt; undefined </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/currency-symbol-map/curreny-symbol-map.gif" alt="currency-symbol-map" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reify]]></title>
    <link href="http://nmotw.in/reify/"/>
    <updated>2016-07-28T15:10:10+00:00</updated>
    <id>http://nmotw.in/reify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/reify">reify</a></h1>

<blockquote><p>Enable ECMAScript 2015 modules in Node today. No caveats. Full stop.</p></blockquote>

<p><strong>Get it:</strong> <code>npm install --save refiy</code></p>

<p><strong>Usage:</strong></p>

<ul>
<li><p><code>npm install --save reify</code></p></li>
<li><p><code>require("reify")</code> before <code>import</code> and <code>export</code> declarations.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;reify/repl&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="kr">import</span> <span class="p">{</span> <span class="nx">strictEqual</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;assert&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">strictEqual</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'><span class="nx">AssertionError</span><span class="o">:</span> <span class="mi">4</span> <span class="o">===</span> <span class="mi">7</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">repl</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">REPLServer</span><span class="p">.</span><span class="nx">defaultEval</span> <span class="p">(</span><span class="nx">repl</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">272</span><span class="o">:</span><span class="mi">27</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">bound</span> <span class="p">(</span><span class="nx">domain</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">280</span><span class="o">:</span><span class="mi">14</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">REPLServer</span><span class="p">.</span><span class="nx">runBound</span> <span class="p">[</span><span class="nx">as</span> <span class="nb">eval</span><span class="p">]</span> <span class="p">(</span><span class="nx">domain</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">293</span><span class="o">:</span><span class="mi">12</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">REPLServer</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">repl</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">441</span><span class="o">:</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">emitOne</span> <span class="p">(</span><span class="nx">events</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">101</span><span class="o">:</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">REPLServer</span><span class="p">.</span><span class="nx">emit</span> <span class="p">(</span><span class="nx">events</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">188</span><span class="o">:</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">REPLServer</span><span class="p">.</span><span class="nx">Interface</span><span class="p">.</span><span class="nx">_onLine</span> <span class="p">(</span><span class="nx">readline</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">224</span><span class="o">:</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">REPLServer</span><span class="p">.</span><span class="nx">Interface</span><span class="p">.</span><span class="nx">_line</span> <span class="p">(</span><span class="nx">readline</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">566</span><span class="o">:</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">REPLServer</span><span class="p">.</span><span class="nx">Interface</span><span class="p">.</span><span class="nx">_ttyWrite</span> <span class="p">(</span><span class="nx">readline</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">843</span><span class="o">:</span><span class="mi">14</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code generated by the <code>reify</code> compiler relies on a <a href="lib/runtime.js">simple runtime
API</a>.</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/reify/reify.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wifi-triangulate]]></title>
    <link href="http://nmotw.in/wifi-triangulate/"/>
    <updated>2016-07-21T17:16:26+00:00</updated>
    <id>http://nmotw.in/wifi-triangulate</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/wifi-triangulate">wifi-triangulate</a></h1>

<blockquote><p>Finds your current position on planet earth using the wifi access points in your vicinity.</p></blockquote>

<p>This module requires that the wifi card on your computer is active and that you have access to the internet in order to communicate with Google so that it can triangulate your position.</p>

<p><strong>Get it:</strong> <code>npm install --global wifi-triangulate</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">triangulate</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;wifi-triangulate&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">triangulate</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">location</span><span class="p">)</span> <span class="c1">// =&gt; { lat: 38.0690894, lng: -122.8069356, accuracy: 42 } </span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!:</strong></p>

<p><img src="http://nmotw.in/images/wifi-triangulate/wifi-triangulate.gif" alt="wifi-triangulate" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cleave.js]]></title>
    <link href="http://nmotw.in/cleave.js/"/>
    <updated>2016-07-14T12:23:00+00:00</updated>
    <id>http://nmotw.in/cleave.js</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/cleave.js#why">cleave.js</a></h1>

<blockquote><p>Input text content formatter.</p></blockquote>

<p><code>Cleave.js</code> has a simple purpose: to help you format input text content automatically.</p>

<p>Provides these features:</p>

<ul>
<li><p>Credit card number formatting</p></li>
<li><p>Phone number formatting (i18n js lib separated for each country to reduce size)</p></li>
<li><p>Date formatting</p></li>
<li><p>Numeral formatting</p></li>
<li><p>Custom delimiter, prefix and blocks pattern</p></li>
<li><p>CommonJS / AMD mode</p></li>
<li><p>ReactJS component port</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install --save cleave.js</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;input-phone&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Cleave</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cleave.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cleave.js/dist/addons/cleave-phone.{country}&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cleave</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cleave</span><span class="p">(</span><span class="s1">&#39;.input-phone&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">phone</span><span class="o">:</span>      <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">regionCode</span><span class="o">:</span> <span class="s1">&#39;{country}&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/cleave.js/cleave.js.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[listr]]></title>
    <link href="http://nmotw.in/listr/"/>
    <updated>2016-07-07T10:03:39+00:00</updated>
    <id>http://nmotw.in/listr</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/listr">listr</a></h1>

<blockquote><p>Terminal task list.</p></blockquote>

<p><code>listr</code> is one of those cheeky 💄 modules for your CLI apps.</p>

<p>Below is the gist of this module:</p>

<ul>
<li><p><code>listr</code> accepts an array of tasks, where each task in a object consisting of <code>title</code> (string) and <code>task</code> (method).</p></li>
<li><p>If a task returns, it means the task was completed succesfully.</p></li>
<li><p>If a task throws an error, the task failed.</p></li>
<li><p>Task can be async by returning a Promise.</p></li>
<li><p>Task can be an Observable.</p></li>
<li><p>Task can also be a stream, which is in-turn converted to an Observable.</p></li>
<li><p>An instance of <code>listr</code> has <code>add(task)</code>, <code>task</code> and <code>run</code> methods. (Names are self explanatory?)</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install --save listr</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Listr</span><span class="p">([</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Success&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">task</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="s1">&#39;Foo&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Failure&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">task</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bar&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">tasks</span><span class="p">.</span><span class="nx">run</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/listr/listr.gif" alt="listr" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-nightly]]></title>
    <link href="http://nmotw.in/node-nightly/"/>
    <updated>2016-06-30T12:31:14+00:00</updated>
    <id>http://nmotw.in/node-nightly</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/node-nightly">node-nightly</a></h1>

<blockquote><p>node-nightly at your finger tips!</p></blockquote>

<p><code>node-nightly</code> as the name says it's the nightly version of <code>node</code>, basically:</p>

<ul>
<li><p>Check if nightly version of node is available if not install it. (For the first time.)</p></li>
<li><p>If there is a new version available will notify the user saying there is a newer version available and can update using <code>node-nightly --update</code></p></li>
</ul>


<p><strong>Get it</strong> : <code>npm install -g node-nightly</code> # Preferred global</p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">node</span><span class="o">-</span><span class="nx">nightly</span> <span class="o">--</span><span class="nx">inspect</span> <span class="o">--</span><span class="nx">debug</span><span class="o">-</span><span class="nx">brk</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">Debugger</span> <span class="nx">listening</span> <span class="nx">on</span> <span class="nx">port</span> <span class="mi">9229</span><span class="p">.</span>
</span><span class='line'><span class="nx">To</span> <span class="nx">start</span> <span class="nx">debugging</span><span class="p">,</span> <span class="nx">open</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">URL</span> <span class="k">in</span> <span class="nx">Chrome</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">chrome</span><span class="o">-</span><span class="nx">devtools</span><span class="o">:</span><span class="c1">//devtools/remote/serve_file/@521e5b7e2b7cc66b4006a8a54cb9c4e57494a5ef/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node</span>
</span><span class='line'><span class="nx">Debugger</span> <span class="nx">attached</span><span class="p">.</span>
</span><span class='line'><span class="nx">Waiting</span> <span class="k">for</span> <span class="nx">the</span> <span class="kr">debugger</span> <span class="nx">to</span> <span class="nx">disconnect</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/node-nightly/node-nightly.gif" alt="node-nightly" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[esbox]]></title>
    <link href="http://nmotw.in/esbox/"/>
    <updated>2016-06-23T13:46:09+00:00</updated>
    <id>http://nmotw.in/esbox</id>
    <content type="html"><![CDATA[<h1><a href="">📦 esbox</a></h1>

<blockquote><p>Zero-config REPL for experimenting with next-generation JavaScript.</p></blockquote>

<p><code>esbox</code> is ES2016 in a box!</p>

<p><strong>Get it:</strong> <code>npm install -g esbox</code></p>

<ul>
<li><p>It automatically compiles and re-runs your script every time you save.</p></li>
<li><p>JSBin-like setup for your local editor and terminal – with full access to Node APIs and modules.</p></li>
<li><p>ECMAScript features that Babel supports (stage-0 and above).</p></li>
<li><p>For a number of popular libraries, you can just import them without the need to install them first (Bascially all the dependecies of <code>esbox</code>).</p></li>
</ul>


<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; esbox
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    📦  ES2016 in a box
</span><span class='line'>       git.io/esbox
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    &gt; esbox FILENAME
</span><span class='line'>
</span><span class='line'>  Options
</span><span class='line'>    --cwd<span class="o">=</span>DIRECTORY   run in a different directory
</span><span class='line'>    --no-watch        only run your script once
</span><span class='line'>    --no-clear        disable clearing the display before each run
</span><span class='line'>    --version         show esbox version
</span><span class='line'>    --poll            poll file system when watching files
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/esbox/esbox.gif" alt="esbox" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rainbowify]]></title>
    <link href="http://nmotw.in/rainbowify/"/>
    <updated>2016-06-16T14:03:58+00:00</updated>
    <id>http://nmotw.in/rainbowify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/rainbowify">rainbowify</a></h1>

<blockquote><p>rainbow print stuff in terminal</p></blockquote>

<p><code>rainbowify</code> is an module extracted from mocha's <a href="https://github.com/mochajs/mocha/blob/master/lib/reporters/nyan.js">nyan.js</a> which is a fun little module
that helps to print rainbow text on the terminal.</p>

<p><strong>Get it:</strong> <code>npm install --global rainbowify</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> &lt;some_text&gt; | rainbowify
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/rainbowify/rainbowify.gif" alt="rainbowify" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pwaify]]></title>
    <link href="http://nmotw.in/pwaify/"/>
    <updated>2016-06-09T12:33:41+00:00</updated>
    <id>http://nmotw.in/pwaify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/pwaify">pwaify</a></h1>

<blockquote><p>PWA to desktop app!</p></blockquote>

<p><code>pwaify</code> bring <a href="https://developers.google.com/web/progressive-web-apps/">progressive</a> <a href="https://github.com/hemanth/generator-pwa">Webapp</a> to your desktops across platforms!</p>

<p>Makes use of <a href="http://electron.atom.io/">Electron</a> extracts the <code>manifest-json</code> from the given URL and smartly creates an electron window and loads the required.</p>

<p><strong>Get it:</strong> <code>npm install --global pwaify</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; pwaify --help
</span><span class='line'>
</span><span class='line'>  Electron PWA <span class="o">(</span>Progressive Web App<span class="o">)</span> Generator
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    <span class="nv">$ </span>pwaify &lt;input&gt;
</span><span class='line'>
</span><span class='line'>  Options
</span><span class='line'>    --platforms Platforms to build the app.
</span><span class='line'>    --icon App Icon.
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>pwaify https://jsfeatures.in --platforms<span class="o">=</span>darwin
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/pwaify/PWAify.gif" alt="PWAify" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kind-of]]></title>
    <link href="http://nmotw.in/kind-of/"/>
    <updated>2016-06-02T16:37:20+00:00</updated>
    <id>http://nmotw.in/kind-of</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/kind-of">kind-of</a></h1>

<blockquote><p>Get the native type of a value.</p></blockquote>

<p>Most of use would have faced nuances of <code>typeof</code> like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">(</span><span class="kc">null</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;object&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="sr">/RE/</span>
</span><span class='line'><span class="s1">&#39;object&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">())</span>
</span><span class='line'><span class="s1">&#39;object&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">[]</span>
</span><span class='line'><span class="s1">&#39;object&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="p">{}</span>
</span><span class='line'><span class="s1">&#39;object&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>kind-of</code> just fixes these issues and is also <code>ES6</code> ready.</p>

<p><strong>Get it:</strong> <code>npm install --save kind-of</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">kindOf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;kind-of&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;undefined&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;null&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;boolean&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;boolean&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; &#39;boolean&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; &#39;buffer&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;number&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; &#39;number&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="s1">&#39;str&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;string&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;str&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; &#39;string&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;arguments&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">({});</span>
</span><span class='line'><span class="c1">//=&gt; &#39;object&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; &#39;object&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Test</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;object&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;date&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">([]);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="sr">/foo/</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;regexp&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; &#39;regexp&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{});</span>
</span><span class='line'><span class="c1">//=&gt; &#39;function&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span> <span class="p">()</span> <span class="p">{});</span>
</span><span class='line'><span class="c1">//=&gt; &#39;function&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nb">Function</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;function&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Map</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;map&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">WeakMap</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;weakmap&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Set</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;set&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">WeakSet</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;weakset&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="nx">Symbol</span><span class="p">(</span><span class="s1">&#39;str&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; &#39;symbol&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Int8Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;int8array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;uint8array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint8ClampedArray</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;uint8clampedarray&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Int16Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;int16array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;uint16array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Int32Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;int32array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;uint32array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;float32array&#39; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">kindOf</span><span class="p">(</span><span class="k">new</span> <span class="nx">Float64Array</span><span class="p">());</span>
</span><span class='line'><span class="c1">//=&gt; &#39;float64array&#39; </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/kind-of/kind-of.gif" alt="kind-of" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mediumcli]]></title>
    <link href="http://nmotw.in/mediumcli/"/>
    <updated>2016-05-26T14:13:06+00:00</updated>
    <id>http://nmotw.in/mediumcli</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mediumcli">mediumcli</a></h1>

<blockquote><p>A CLI to Medium Stories.</p></blockquote>

<p>A simple tool that helps you to read medium posts on your CLI.</p>

<p><strong>Get it:</strong> <code>npm install -g mediumcli</code></p>

<p><strong>Sample usage:</strong> <code>medium [options] [command]</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Commands:
</span><span class='line'>
</span><span class='line'>top <span class="o">[</span>options<span class="o">]</span>         List Medium Top Stories
</span><span class='line'><span class="nb">read</span> &lt;url&gt;            Read the story right in your terminal
</span><span class='line'>open <span class="o">[</span>options<span class="o">]</span> &lt;url&gt;  Opens it in your browser
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>
</span><span class='line'>-h, --help     output usage information
</span><span class='line'>-V, --version  output the version number
</span><span class='line'>
</span><span class='line'>top <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>n, --number &lt;int&gt;<span class="s2">&quot;, &quot;</span>specify number of stories
</span><span class='line'>
</span><span class='line'>open <span class="o">[</span>options<span class="o">]</span> &lt;url&gt;
</span><span class='line'>-a, --app &lt;application&gt;  specify app to open the url. Eg: firefox
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/mediumcli/mediumcli.gif" alt="mediumcli" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[speedline]]></title>
    <link href="http://nmotw.in/speedline/"/>
    <updated>2016-05-20T05:01:00+00:00</updated>
    <id>http://nmotw.in/speedline</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/speedline">speedline</a></h1>

<blockquote><p>Calculate the speed index and visual performance metrics from chrome dev tool timeline.</p></blockquote>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigation_timing_API">Navigation Timing API</a> provides useful data that can be used to measure the performance of a website.</p>

<p>Unfortunately this API has never been good at capturing the actual <em>user experience</em> that's where <code>speedline</code> comes to rescue.</p>

<p>It measures <strong>how fast the page content is visually displayed</strong>.</p>

<p>The current implementation is based on the <strong>Visual Progress from Video Capture</strong> calculation method described on the <a href="https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index">Speed Index</a> page.</p>

<p>The visual progress is calculated by comparing the distance between the histogram of the current frame and the final frame.</p>

<p><strong>GET IT:</strong></p>

<p><code>$ npm install --global speedline</code> // For CLI</p>

<p><code>$ npm install --save speedline</code> // As a devdep.</p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>speedline --help
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    <span class="nv">$ </span>speedline &lt;timeline&gt; <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  Options
</span><span class='line'>    -p, --pretty  Pretty print the output
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>speedline ./timeline.json
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/speedline/speedline.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[obsify]]></title>
    <link href="http://nmotw.in/obsify/"/>
    <updated>2016-05-12T13:19:01+00:00</updated>
    <id>http://nmotw.in/obsify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/obsify">obsify</a></h1>

<blockquote><p>Observableify a callback-style function</p></blockquote>

<p>Observerifies (is that even a word ;)?) a callback-style function into an observable.</p>

<p><strong>Get it:</strong> <code>npm install --save obsify</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">obsify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;obsify&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obsify</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">)(</span><span class="s1">&#39;package.json&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//=&gt; &#39;obsify&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>or <code>observableify</code> all methods in a module</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">obsify</span><span class="p">(</span><span class="nx">fs</span><span class="p">).</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//=&gt; &#39;obsify&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/obsify/obsify.gif" alt="obsify" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[captionbot]]></title>
    <link href="http://nmotw.in/captionbot/"/>
    <updated>2016-05-05T12:57:22+00:00</updated>
    <id>http://nmotw.in/captionbot</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/captionbot">captionbot</a></p>

<blockquote><p>Get captions for image using Microsoft's CaptionBot 🤖</p></blockquote>

<p>A cheeky bot that tries recognize an image and explain it like a human would do, it requires node version <code>&gt;=4</code> this is powered by <a href="https://www.captionbot.ai/">CaptionBot</a>, a free service provided by Microsoft.</p>

<p>The author says he would consider this module "for testing only" and does not recommend using in a production system.</p>

<p><strong>Get it:</strong> <code>npm install --save captionbot</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">captionbot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;captionbot&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">captionbot</span><span class="p">(</span><span class="s1">&#39;http://i.imgur.com/o33PTUp.jpg&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">caption</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">caption</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//=&gt; &#39;I think it&#39;s a group of people posing for a picture\nand he seems 😐.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">captionbot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;captionbot&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">caption</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">captionbot</span><span class="p">(</span><span class="s1">&#39;http://i.imgur.com/o33PTUp.jpg&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">caption</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/captionbot/captionbot.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[trevor]]></title>
    <link href="http://nmotw.in/trevor/"/>
    <updated>2016-04-28T10:26:32+00:00</updated>
    <id>http://nmotw.in/trevor</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/trevor">trevor</a></h1>

<blockquote><p>Your own Travis CI to run tests locally.</p></blockquote>

<p><img src="http://nmotw.in/images/trevor/logo.png" alt="" /></p>

<p><strong>From the author:</strong></p>

<p>I often need to run tests for multiple versions of Node.js.</p>

<p>But I don't want to switch versions manually using n/nvm or push the code to Travis CI just to run the tests.</p>

<p>That's why I created Trevor.</p>

<p>It reads <code>.travis.yml</code> and runs tests in all versions you requested, just like Travis CI.</p>

<p>Now, you can test before push and keep your git history clean.</p>

<p><strong>Get it:</strong> <code>npm install --save trevor</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>trevor --help
</span><span class='line'>
</span><span class='line'>  Your own Travis CI to run tests locally
</span><span class='line'>
</span><span class='line'>  Usage: trevor <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  Options:
</span><span class='line'>
</span><span class='line'>    -h, --help    Show this <span class="nb">help</span>
</span><span class='line'>    --no-clean    Don<span class="err">&#39;</span> remove the Docker image after tests
</span><span class='line'>
</span><span class='line'>  Required files <span class="o">(</span>in the current directory<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>    - package.json
</span><span class='line'>    - .travis.yml
</span></code></pre></td></tr></table></div></figure>


<p>P.S: <code>trevor</code> has a dependency on <a href="https://www.docker.com/">docker</a> and if <code>--no-clean</code> is not used it will remove all the docker images after the test runs.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/trevor/trevor.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cowsay]]></title>
    <link href="http://nmotw.in/cowsay/"/>
    <updated>2016-04-21T15:10:16+00:00</updated>
    <id>http://nmotw.in/cowsay</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/cowsay">cowsay</a></h1>

<blockquote><p>A configurable talking cow!</p></blockquote>

<p>This is a port of  Tony Monroe's <code>cowsay</code> Perl module.</p>

<p><strong>GET IT:</strong> <code>npm install --global cowsay</code></p>

<p><strong>CLI:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cowsay 
</span><span class='line'>Usage: cowsay [-e eye_string] [-f cowfile] [-h] [-l] [-n] [-T tongue_string] [-W column] [-bdgpstwy] text
</span><span class='line'>
</span><span class='line'>If any command-line arguments are left over after all switches have been processed, they become the cow's message.
</span><span class='line'>
</span><span class='line'>If the program is invoked as cowthink then the cow will think its message instead of saying it.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -b  Mode: Borg                                                                                                                                  
</span><span class='line'>  -d  Mode: Dead                                                                                                                                  
</span><span class='line'>  -g  Mode: Greedy                                                                                                                                
</span><span class='line'>  -p  Mode: Paranoia                                                                                                                              
</span><span class='line'>  -s  Mode: Stoned                                                                                                                                
</span><span class='line'>  -t  Mode: Tired                                                                                                                                 
</span><span class='line'>  -w  Mode: Wired                                                                                                                                 
</span><span class='line'>  -y  Mode: Youthful                                                                                                                              
</span><span class='line'>  -e  Select the appearance of the cow's eyes.                                                                                                      [default: "oo"]
</span><span class='line'>  -T  The tongue is configurable similarly to the eyes through -T and tongue_string.                                                                [default: "  "]
</span><span class='line'>  -h  Display this help message                                                                                                                   
</span><span class='line'>  -n  If it is specified, the given message will not be word-wrapped.                                                                             
</span><span class='line'>  -W  Specifies roughly where the message should be wrapped. The default is equivalent to -W 40 i.e. wrap words at or before the 40th column.       [default: 40]
</span><span class='line'>  -f  Specifies a cow picture file (''cowfile'') to use. It can be either a path to a cow file or the name of one of cows included in the package.  [default: "default"]
</span><span class='line'>  -l  List all cowfiles included in this package.                 </span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>
</span><span class='line'> nmotw.in&gt; cowsay JavaScript FTW!
</span><span class='line'> _________________
</span><span class='line'>&lt; JavaScript FTW! &gt;
</span><span class='line'> -----------------
</span><span class='line'>        <span class="se">\ </span>  ^__^
</span><span class='line'>         <span class="se">\ </span> <span class="o">(</span>oo<span class="o">)</span><span class="se">\_</span>______
</span><span class='line'>            <span class="o">(</span>__<span class="o">)</span><span class="se">\ </span>      <span class="o">)</span><span class="se">\/\</span>
</span><span class='line'>                <span class="o">||</span>----w |
</span><span class='line'>                <span class="o">||</span>     <span class="o">||</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><strong>API:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">cowsay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;cowsay&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cowsay</span><span class="p">.</span><span class="nx">say</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">:</span> <span class="s2">&quot;I&#39;m a moooodule&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">e</span> <span class="o">:</span> <span class="s2">&quot;oO&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">T</span> <span class="o">:</span> <span class="s2">&quot;U &quot;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or cowsay.think()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> _________________
</span><span class='line'><span class="o">(</span> I<span class="err">&#39;</span>m a moooodule <span class="o">)</span>
</span><span class='line'> -----------------
</span><span class='line'>        o   ^__^
</span><span class='line'>         o  <span class="o">(</span>oO<span class="o">)</span><span class="se">\_</span>______
</span><span class='line'>            <span class="o">(</span>__<span class="o">)</span><span class="se">\ </span>      <span class="o">)</span><span class="se">\/\</span>
</span><span class='line'>             U  <span class="o">||</span>----w |
</span><span class='line'>                <span class="o">||</span>     <span class="o">||</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/cowsay/cowsay.gif" alt="cowsay.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wifi-password]]></title>
    <link href="http://nmotw.in/wifi-password/"/>
    <updated>2016-04-14T16:15:12+00:00</updated>
    <id>http://nmotw.in/wifi-password</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/wifi-password">wifi-password</a></h1>

<blockquote><p>Get current wifi password.</p></blockquote>

<p>Do you remember your wifi password?</p>

<p>Do you want share it with your guests?</p>

<p><code>wifi-password</code> is the util to use works across OSs.</p>

<p>Basically fires the below commands based on the OS for the given or connected <code>SSID</code>:</p>

<ul>
<li><p><code>GNU/Linux</code> -> <code>sudo cat /etc/NetworkManager/system-connections/${ssid}</code>;</p></li>
<li><p><code>OSX</code> ->  <code>security find-generic-password -D AirPort network password -wa ssid</code></p></li>
<li><p><code>Windows</code> -> <code>netsh wlan show profile $(name=${ssid}) $(key=clear)</code></p></li>
</ul>


<p><strong>GET IT</strong>:</p>

<p><code>npm install --save wifi-password</code> for API</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wifiPassword</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;wifi-password&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">wifiPassword</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">password</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//=&gt; &#39;johndoesecretpassword&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>npm install --global wifi-password</code> for CLI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">wifi</span><span class="o">-</span><span class="nx">password</span> <span class="o">--</span><span class="nx">help</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Usage</span>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">wifi</span><span class="o">-</span><span class="nx">password</span>
</span><span class='line'>    <span class="nx">johndoesecretpassword</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">wifi</span><span class="o">-</span><span class="nx">password</span> <span class="nx">foo</span><span class="o">-</span><span class="nx">network</span>
</span><span class='line'>    <span class="nx">foosecretpassword</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/wifi-password/wifi-password.gif" alt="wifi-password" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mathjs]]></title>
    <link href="http://nmotw.in/mathjs/"/>
    <updated>2016-04-07T13:52:08+00:00</updated>
    <id>http://nmotw.in/mathjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mathjs">mathjs</a></h1>

<blockquote><p>Extensive math library with expression parser, big numbers, complex numbers, units, and matrices.</p></blockquote>

<p><code>mathjs</code> provides you with 200+ util function to do you math!</p>

<p><strong>Get it:</strong> <code>npm install --save mathjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// functions and constants</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>            <span class="c1">// 2.718</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">/</span> <span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">;</span>      <span class="c1">// 0.75</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>              <span class="c1">// 4</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>                    <span class="c1">// 2i</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">pow</span><span class="p">([[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>     <span class="c1">// [[7, 0], [0, 7]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// expressions</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;1.2 * (2 + 4.5)&#39;</span><span class="p">);</span>     <span class="c1">// 7.8</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;5.08 cm to inch&#39;</span><span class="p">);</span>     <span class="c1">// 2 inch</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;sin(45 deg) ^ 2&#39;</span><span class="p">);</span>     <span class="c1">// 0.5</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;9 / 3 + 2i&#39;</span><span class="p">);</span>          <span class="c1">// 3 + 2i</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;det([-1, 2; 3, 1])&#39;</span><span class="p">);</span>  <span class="c1">// -7</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// chaining</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">chain</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">done</span><span class="p">();</span> <span class="c1">// 14</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/mathjs/mathjs.gif" alt="mathjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[trymodule]]></title>
    <link href="http://nmotw.in/trymodule/"/>
    <updated>2016-03-31T13:11:49+00:00</updated>
    <id>http://nmotw.in/trymodule</id>
    <content type="html"><![CDATA[<h1><a href="">trymodule</a></h1>

<blockquote><p>It's never been easier to try nodejs modules!</p></blockquote>

<p>Quickly install any node module you want and start a <code>REPL</code> with the installed module in the scope with <code>trymodule</code>!</p>

<p>Basically, it check if the module you are trying exists in the <code>~/.trymodule/node_module</code> if require it and start a <code>REPL</code> or
else installs it using <code>npmi</code> module and starts the <code>REPL</code>.</p>

<p><strong>Get it:</strong> <code>npm install -g trymodule</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; trymodule xkcd-imgs
</span><span class='line'>Gonna start a REPL with packages installed and loaded <span class="k">for </span>you
</span><span class='line'>Couldn<span class="s1">&#39;t find &#39;</span>xkcd-imgs<span class="s1">&#39; locally, gonna download it now</span>
</span><span class='line'><span class="s1">xkcd-imgs@1.0.1 ../../Users/hhegadehallimadh/.trymodule/node_modules/xkcd-imgs</span>
</span><span class='line'><span class="s1">└── request@2.69.0 (aws-sign2@0.6.0, forever-agent@0.6.1, tunnel-agent@0.4.2, oauth-sign@0.8.1, caseless@0.11.0, is-typedarray@1.0.0, stringstream@0.0.5, isstream@0.1.2, json-stringify-safe@5.0.1, extend@3.0.0, tough-cookie@2.2.2, node-uuid@1.4.7, qs@6.0.2, mime-types@2.1.10, form-data@1.0.0-rc4, combined-stream@1.0.5, hawk@3.1.3, aws4@1.3.2, http-signature@1.1.1, bl@1.0.3, har-validator@2.0.6)</span>
</span><span class='line'><span class="s1">Package &#39;</span>xkcd-imgs<span class="s1">&#39; was loaded and assigned to &#39;</span>xkcd_imgs<span class="err">&#39;</span> in the current scope
</span><span class='line'>REPL started...
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">xkcd_imgs</span>
</span><span class='line'><span class="p">{</span> <span class="nx">img</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">xkcd_imgs</span><span class="p">.</span><span class="nx">img</span><span class="p">(</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://imgs.xkcd.com/comics/instagram.png&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;I\&#39;m gonna call the cops and get Chad arrested for theft, then move all my stuff to the house across the street. Hopefully the owners there are more responsible.&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/trymodule/trymodule.gif" alt="trymodule" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phuzzy]]></title>
    <link href="http://nmotw.in/phuzzy/"/>
    <updated>2016-03-24T15:56:50+00:00</updated>
    <id>http://nmotw.in/phuzzy</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/phuzzy">phuzzy</a></h1>

<blockquote><p>Perform a fuzzy filter on a collection of items.</p></blockquote>

<p>8 lines of code with some help from <code>lodash.escaperegexp</code> this is a cheeky module that helps you with your fuzzy filtering!</p>

<p><strong>Get it:</strong> <code>npm install --save phuzzy</code></p>

<p><strong>Function Signature:</strong> <code>phuzzy(collection, search[, pick])</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">phuzzy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;phuzzy&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">phuzzy</span><span class="p">([</span><span class="s1">&#39;addy&#39;</span><span class="p">,</span><span class="s1">&#39;passy&#39;</span><span class="p">,</span> <span class="s1">&#39;hemanth&#39;</span><span class="p">],</span> <span class="s1">&#39;y&#39;</span><span class="p">);</span> <span class="c1">// [&#39;addy&#39;, &#39;passy&#39;];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">documents</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello World&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello Lucy&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello Maria&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">phuzzy</span><span class="p">(</span><span class="nx">documents</span><span class="p">,</span> <span class="s1">&#39;Lu&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">);</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello Lucy&#39;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">phuzzy</span><span class="p">(</span><span class="nx">documents</span><span class="p">,</span> <span class="s1">&#39;maria&#39;</span><span class="p">,</span> <span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">text</span><span class="p">)</span> <span class="c1">// [ { text: &#39;Hello Maria&#39; } ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/phuzzy/phuzzy.gif" alt="phuzzy" /></p>
]]></content>
  </entry>
  
</feed>
