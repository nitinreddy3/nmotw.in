<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2016-05-05T13:48:01+00:00</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[captionbot]]></title>
    <link href="http://nmotw.in/captionbot/"/>
    <updated>2016-05-05T12:57:22+00:00</updated>
    <id>http://nmotw.in/captionbot</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/captionbot">captionbot</a></p>

<blockquote><p>Get captions for image using Microsoft's CaptionBot ü§ñ</p></blockquote>

<p>A cheeky bot that tries recognize an image and explain it like a human would do, it requires node version <code>&gt;=4</code> this is powered by <a href="https://www.captionbot.ai/">CaptionBot</a>, a free service provided by Microsoft.</p>

<p>The author says he would consider this module "for testing only" and does not recommend using in a production system.</p>

<p><strong>Get it:</strong> <code>npm install --save captionbot</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">captionbot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;captionbot&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">captionbot</span><span class="p">(</span><span class="s1">&#39;http://i.imgur.com/o33PTUp.jpg&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">caption</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">caption</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//=&gt; &#39;I think it&#39;s a group of people posing for a picture\nand he seems üòê.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">captionbot</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;captionbot&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">caption</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">captionbot</span><span class="p">(</span><span class="s1">&#39;http://i.imgur.com/o33PTUp.jpg&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">caption</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/captionbot/captionbot.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[trevor]]></title>
    <link href="http://nmotw.in/trevor/"/>
    <updated>2016-04-28T10:26:32+00:00</updated>
    <id>http://nmotw.in/trevor</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/trevor">trevor</a></h1>

<blockquote><p>Your own Travis CI to run tests locally.</p></blockquote>

<p><img src="http://nmotw.in/images/trevor/logo.png" alt="" /></p>

<p><strong>From the author:</strong></p>

<p>I often need to run tests for multiple versions of Node.js.</p>

<p>But I don't want to switch versions manually using n/nvm or push the code to Travis CI just to run the tests.</p>

<p>That's why I created Trevor.</p>

<p>It reads <code>.travis.yml</code> and runs tests in all versions you requested, just like Travis CI.</p>

<p>Now, you can test before push and keep your git history clean.</p>

<p><strong>Get it:</strong> <code>npm install --save trevor</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>trevor --help
</span><span class='line'>
</span><span class='line'>  Your own Travis CI to run tests locally
</span><span class='line'>
</span><span class='line'>  Usage: trevor <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  Options:
</span><span class='line'>
</span><span class='line'>    -h, --help    Show this <span class="nb">help</span>
</span><span class='line'>    --no-clean    Don<span class="err">&#39;</span> remove the Docker image after tests
</span><span class='line'>
</span><span class='line'>  Required files <span class="o">(</span>in the current directory<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>    - package.json
</span><span class='line'>    - .travis.yml
</span></code></pre></td></tr></table></div></figure>


<p>P.S: <code>trevor</code> has a dependency on <a href="https://www.docker.com/">docker</a> and if <code>--no-clean</code> is not used it will remove all the docker images after the test runs.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/trevor/trevor.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cowsay]]></title>
    <link href="http://nmotw.in/cowsay/"/>
    <updated>2016-04-21T15:10:16+00:00</updated>
    <id>http://nmotw.in/cowsay</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/cowsay">cowsay</a></h1>

<blockquote><p>A configurable talking cow!</p></blockquote>

<p>This is a port of  Tony Monroe's <code>cowsay</code> Perl module.</p>

<p><strong>GET IT:</strong> <code>npm install --global cowsay</code></p>

<p><strong>CLI:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cowsay 
</span><span class='line'>Usage: cowsay [-e eye_string] [-f cowfile] [-h] [-l] [-n] [-T tongue_string] [-W column] [-bdgpstwy] text
</span><span class='line'>
</span><span class='line'>If any command-line arguments are left over after all switches have been processed, they become the cow's message.
</span><span class='line'>
</span><span class='line'>If the program is invoked as cowthink then the cow will think its message instead of saying it.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -b  Mode: Borg                                                                                                                                  
</span><span class='line'>  -d  Mode: Dead                                                                                                                                  
</span><span class='line'>  -g  Mode: Greedy                                                                                                                                
</span><span class='line'>  -p  Mode: Paranoia                                                                                                                              
</span><span class='line'>  -s  Mode: Stoned                                                                                                                                
</span><span class='line'>  -t  Mode: Tired                                                                                                                                 
</span><span class='line'>  -w  Mode: Wired                                                                                                                                 
</span><span class='line'>  -y  Mode: Youthful                                                                                                                              
</span><span class='line'>  -e  Select the appearance of the cow's eyes.                                                                                                      [default: "oo"]
</span><span class='line'>  -T  The tongue is configurable similarly to the eyes through -T and tongue_string.                                                                [default: "  "]
</span><span class='line'>  -h  Display this help message                                                                                                                   
</span><span class='line'>  -n  If it is specified, the given message will not be word-wrapped.                                                                             
</span><span class='line'>  -W  Specifies roughly where the message should be wrapped. The default is equivalent to -W 40 i.e. wrap words at or before the 40th column.       [default: 40]
</span><span class='line'>  -f  Specifies a cow picture file (''cowfile'') to use. It can be either a path to a cow file or the name of one of cows included in the package.  [default: "default"]
</span><span class='line'>  -l  List all cowfiles included in this package.                 </span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>
</span><span class='line'> nmotw.in&gt; cowsay JavaScript FTW!
</span><span class='line'> _________________
</span><span class='line'>&lt; JavaScript FTW! &gt;
</span><span class='line'> -----------------
</span><span class='line'>        <span class="se">\ </span>  ^__^
</span><span class='line'>         <span class="se">\ </span> <span class="o">(</span>oo<span class="o">)</span><span class="se">\_</span>______
</span><span class='line'>            <span class="o">(</span>__<span class="o">)</span><span class="se">\ </span>      <span class="o">)</span><span class="se">\/\</span>
</span><span class='line'>                <span class="o">||</span>----w |
</span><span class='line'>                <span class="o">||</span>     <span class="o">||</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><strong>API:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">cowsay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;cowsay&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cowsay</span><span class="p">.</span><span class="nx">say</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">:</span> <span class="s2">&quot;I&#39;m a moooodule&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">e</span> <span class="o">:</span> <span class="s2">&quot;oO&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">T</span> <span class="o">:</span> <span class="s2">&quot;U &quot;</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or cowsay.think()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> _________________
</span><span class='line'><span class="o">(</span> I<span class="err">&#39;</span>m a moooodule <span class="o">)</span>
</span><span class='line'> -----------------
</span><span class='line'>        o   ^__^
</span><span class='line'>         o  <span class="o">(</span>oO<span class="o">)</span><span class="se">\_</span>______
</span><span class='line'>            <span class="o">(</span>__<span class="o">)</span><span class="se">\ </span>      <span class="o">)</span><span class="se">\/\</span>
</span><span class='line'>             U  <span class="o">||</span>----w |
</span><span class='line'>                <span class="o">||</span>     <span class="o">||</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/cowsay/cowsay.gif" alt="cowsay.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wifi-password]]></title>
    <link href="http://nmotw.in/wifi-password/"/>
    <updated>2016-04-14T16:15:12+00:00</updated>
    <id>http://nmotw.in/wifi-password</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/wifi-password">wifi-password</a></h1>

<blockquote><p>Get current wifi password.</p></blockquote>

<p>Do you remember your wifi password?</p>

<p>Do you want share it with your guests?</p>

<p><code>wifi-password</code> is the util to use works across OSs.</p>

<p>Basically fires the below commands based on the OS for the given or connected <code>SSID</code>:</p>

<ul>
<li><p><code>GNU/Linux</code> -> <code>sudo cat /etc/NetworkManager/system-connections/${ssid}</code>;</p></li>
<li><p><code>OSX</code> ->  <code>security find-generic-password -D AirPort network password -wa ssid</code></p></li>
<li><p><code>Windows</code> -> <code>netsh wlan show profile $(name=${ssid}) $(key=clear)</code></p></li>
</ul>


<p><strong>GET IT</strong>:</p>

<p><code>npm install --save wifi-password</code> for API</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wifiPassword</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;wifi-password&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">wifiPassword</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">password</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//=&gt; &#39;johndoesecretpassword&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>npm install --global wifi-password</code> for CLI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">wifi</span><span class="o">-</span><span class="nx">password</span> <span class="o">--</span><span class="nx">help</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Usage</span>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">wifi</span><span class="o">-</span><span class="nx">password</span>
</span><span class='line'>    <span class="nx">johndoesecretpassword</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span> <span class="nx">wifi</span><span class="o">-</span><span class="nx">password</span> <span class="nx">foo</span><span class="o">-</span><span class="nx">network</span>
</span><span class='line'>    <span class="nx">foosecretpassword</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/wifi-password/wifi-password.gif" alt="wifi-password" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mathjs]]></title>
    <link href="http://nmotw.in/mathjs/"/>
    <updated>2016-04-07T13:52:08+00:00</updated>
    <id>http://nmotw.in/mathjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mathjs">mathjs</a></h1>

<blockquote><p>Extensive math library with expression parser, big numbers, complex numbers, units, and matrices.</p></blockquote>

<p><code>mathjs</code> provides you with 200+ util function to do you math!</p>

<p><strong>Get it:</strong> <code>npm install --save mathjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// functions and constants</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>            <span class="c1">// 2.718</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">/</span> <span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">;</span>      <span class="c1">// 0.75</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>              <span class="c1">// 4</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>                    <span class="c1">// 2i</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">pow</span><span class="p">([[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>     <span class="c1">// [[7, 0], [0, 7]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// expressions</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;1.2 * (2 + 4.5)&#39;</span><span class="p">);</span>     <span class="c1">// 7.8</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;5.08 cm to inch&#39;</span><span class="p">);</span>     <span class="c1">// 2 inch</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;sin(45 deg) ^ 2&#39;</span><span class="p">);</span>     <span class="c1">// 0.5</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;9 / 3 + 2i&#39;</span><span class="p">);</span>          <span class="c1">// 3 + 2i</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;det([-1, 2; 3, 1])&#39;</span><span class="p">);</span>  <span class="c1">// -7</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// chaining</span>
</span><span class='line'><span class="nx">math</span><span class="p">.</span><span class="nx">chain</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">done</span><span class="p">();</span> <span class="c1">// 14</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/mathjs/mathjs.gif" alt="mathjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[trymodule]]></title>
    <link href="http://nmotw.in/trymodule/"/>
    <updated>2016-03-31T13:11:49+00:00</updated>
    <id>http://nmotw.in/trymodule</id>
    <content type="html"><![CDATA[<h1><a href="">trymodule</a></h1>

<blockquote><p>It's never been easier to try nodejs modules!</p></blockquote>

<p>Quickly install any node module you want and start a <code>REPL</code> with the installed module in the scope with <code>trymodule</code>!</p>

<p>Basically, it check if the module you are trying exists in the <code>~/.trymodule/node_module</code> if require it and start a <code>REPL</code> or
else installs it using <code>npmi</code> module and starts the <code>REPL</code>.</p>

<p><strong>Get it:</strong> <code>npm install -g trymodule</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; trymodule xkcd-imgs
</span><span class='line'>Gonna start a REPL with packages installed and loaded <span class="k">for </span>you
</span><span class='line'>Couldn<span class="s1">&#39;t find &#39;</span>xkcd-imgs<span class="s1">&#39; locally, gonna download it now</span>
</span><span class='line'><span class="s1">xkcd-imgs@1.0.1 ../../Users/hhegadehallimadh/.trymodule/node_modules/xkcd-imgs</span>
</span><span class='line'><span class="s1">‚îî‚îÄ‚îÄ request@2.69.0 (aws-sign2@0.6.0, forever-agent@0.6.1, tunnel-agent@0.4.2, oauth-sign@0.8.1, caseless@0.11.0, is-typedarray@1.0.0, stringstream@0.0.5, isstream@0.1.2, json-stringify-safe@5.0.1, extend@3.0.0, tough-cookie@2.2.2, node-uuid@1.4.7, qs@6.0.2, mime-types@2.1.10, form-data@1.0.0-rc4, combined-stream@1.0.5, hawk@3.1.3, aws4@1.3.2, http-signature@1.1.1, bl@1.0.3, har-validator@2.0.6)</span>
</span><span class='line'><span class="s1">Package &#39;</span>xkcd-imgs<span class="s1">&#39; was loaded and assigned to &#39;</span>xkcd_imgs<span class="err">&#39;</span> in the current scope
</span><span class='line'>REPL started...
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">xkcd_imgs</span>
</span><span class='line'><span class="p">{</span> <span class="nx">img</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">xkcd_imgs</span><span class="p">.</span><span class="nx">img</span><span class="p">(</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://imgs.xkcd.com/comics/instagram.png&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;I\&#39;m gonna call the cops and get Chad arrested for theft, then move all my stuff to the house across the street. Hopefully the owners there are more responsible.&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/trymodule/trymodule.gif" alt="trymodule" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phuzzy]]></title>
    <link href="http://nmotw.in/phuzzy/"/>
    <updated>2016-03-24T15:56:50+00:00</updated>
    <id>http://nmotw.in/phuzzy</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/phuzzy">phuzzy</a></h1>

<blockquote><p>Perform a fuzzy filter on a collection of items.</p></blockquote>

<p>8 lines of code with some help from <code>lodash.escaperegexp</code> this is a cheeky module that helps you with your fuzzy filtering!</p>

<p><strong>Get it:</strong> <code>npm install --save phuzzy</code></p>

<p><strong>Function Signature:</strong> <code>phuzzy(collection, search[, pick])</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">phuzzy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;phuzzy&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">phuzzy</span><span class="p">([</span><span class="s1">&#39;addy&#39;</span><span class="p">,</span><span class="s1">&#39;passy&#39;</span><span class="p">,</span> <span class="s1">&#39;hemanth&#39;</span><span class="p">],</span> <span class="s1">&#39;y&#39;</span><span class="p">);</span> <span class="c1">// [&#39;addy&#39;, &#39;passy&#39;];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">documents</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello World&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello Lucy&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello Maria&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">phuzzy</span><span class="p">(</span><span class="nx">documents</span><span class="p">,</span> <span class="s1">&#39;Lu&#39;</span><span class="p">,</span> <span class="s1">&#39;text&#39;</span><span class="p">);</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Hello Lucy&#39;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">phuzzy</span><span class="p">(</span><span class="nx">documents</span><span class="p">,</span> <span class="s1">&#39;maria&#39;</span><span class="p">,</span> <span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">text</span><span class="p">)</span> <span class="c1">// [ { text: &#39;Hello Maria&#39; } ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/phuzzy/phuzzy.gif" alt="phuzzy" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fixpack]]></title>
    <link href="http://nmotw.in/fixpack/"/>
    <updated>2016-03-17T11:08:38+00:00</updated>
    <id>http://nmotw.in/fixpack</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fixpack">fixpack</a></h1>

<blockquote><p>A <code>package.json</code> file scrubber for the truly insane.</p></blockquote>

<p><strong>GET IT:</strong> <code>npm install -g fixpack</code></p>

<p>It will re-write your package.json file as follows:</p>

<ul>
<li>name first</li>
<li>description second</li>
<li>version third</li>
<li>author fourth</li>
<li>all other keys in alphabetical order</li>
<li>dependencies and devDependencies sorted alphabetically</li>
<li>newline at the end of the file</li>
</ul>


<p>It will warn you if any of these are missing:</p>

<ul>
<li>description</li>
<li>author</li>
<li>repository</li>
<li>keywords</li>
<li>main</li>
<li>bugs</li>
<li>homepage</li>
<li>license</li>
</ul>


<p>It can also read a config from <code>.fixpackrc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    // will put these first in this order if present
</span><span class='line'>    sortToTop: [
</span><span class='line'>        'name',
</span><span class='line'>        'description',
</span><span class='line'>        'version',
</span><span class='line'>        'author'
</span><span class='line'>    ],
</span><span class='line'>    // will error if these not present
</span><span class='line'>    required: [
</span><span class='line'>        'name',
</span><span class='line'>        'version'
</span><span class='line'>    ],
</span><span class='line'>    // will warn if these not present
</span><span class='line'>    warn: [
</span><span class='line'>        'description',
</span><span class='line'>        'author',
</span><span class='line'>        'repository',
</span><span class='line'>        'keywords',
</span><span class='line'>        'main',
</span><span class='line'>        'bugs',
</span><span class='line'>        'homepage',
</span><span class='line'>        'license'
</span><span class='line'>    ],
</span><span class='line'>    // if `private: true` in package.json will use the next two lists instead
</span><span class='line'>    requiredOnPrivate: [],
</span><span class='line'>    warnOnPrivate: ['name', 'version', 'description', 'main'],
</span><span class='line'>    // sub items to sort by default
</span><span class='line'>    sortedSubItems: [
</span><span class='line'>        'dependencies',
</span><span class='line'>        'devDependencies',
</span><span class='line'>        'jshintConfig',
</span><span class='line'>        'scripts',
</span><span class='line'>        'keywords'
</span><span class='line'>    ],
</span><span class='line'>    // if you set quiet to true it won't do output anything to the console
</span><span class='line'>    quiet: false,
</span><span class='line'>    // files to scrub
</span><span class='line'>    files: ['package.json'],
</span><span class='line'>    // Will set all deps to '*'
</span><span class='line'>    // this may be useful because then you can
</span><span class='line'>    // run npm update --save && npm update --save-dev
</span><span class='line'>    // to install latest stable releases of everything.
</span><span class='line'>    wipe: false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fixpack/fixpack.gif" alt="fixpack" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selectn]]></title>
    <link href="http://nmotw.in/selectn/"/>
    <updated>2016-03-10T14:54:59+00:00</updated>
    <id>http://nmotw.in/selectn</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/selectn">selectn</a></p>

<blockquote><p>Resolve deeply-nested object properties via dot/bracket-notation string or array path while mitigating TypeErrors.</p></blockquote>

<h6>refactor this:</h6>

<pre><code>person &amp;&amp; person.info &amp;&amp; person.info.name &amp;&amp; person.info.name.full
</code></pre>

<h6>into:</h6>

<pre><code>selectn('info.name.full', person)
</code></pre>

<h6>or this:</h6>

<pre><code>contacts.map(function (contact) {
  return contact &amp;&amp; contact.addresses &amp;&amp; contact.addresses[0]
})
</code></pre>

<h6>into:</h6>

<pre><code>contacts.map(selectn('addresses[0]')))
</code></pre>

<h2>Installation</h2>

<pre><code>&gt; npm install selectn --save
</code></pre>

<h2>Features</h2>

<ul>
<li>Mitigates boilerplate guards like <code>if (obj &amp;&amp; obj.a &amp;&amp; obj.a.b &amp;&amp; obj.a.b.c) { return obj.a.b.c; }</code>.</li>
<li>Mitigates <strong>TypeError</strong> <code>Cannot read property '...' of undefined</code>.</li>
<li>Supports multiple levels of array nesting (i.e. <code>group[0].section.a.seat[3]</code>).</li>
<li>Supports dashed key access (i.e. <code>stats.temperature-today</code>).</li>
<li>If value at path is a function, the value returned is the return value of invoking the function.</li>
<li><a href="https://medium.com/@wilmoore/un-bind-your-js-with-curry-a8657a4138cb#.6dswguc2q">Partial application is automatic</a> when you omit the second argument (i.e. <code>selectn</code> is curried).</li>
<li>Property accessor generated by <code>selectn</code> can be passed to higher-order functions like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">map</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter</a>.</li>
<li>Compatible with <a href="https://saucelabs.com/u/selectn">modern and legacy browsers</a>, Node/CommonJS, and AMD.</li>
<li>Haskell style <a href="https://wiki.haskell.org/Parameter_order">parameter order</a> allows for <a href="https://medium.com/@wilmoore/un-bind-your-js-with-curry-a8657a4138cb#.6dswguc2q">pointfree style programming</a>.</li>
</ul>


<h2>Non-Features</h2>

<ul>
<li>No <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval">eval</a> or <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function">Function</a> (see: <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Member_Operators#Note_on_eval"><code>eval</code></a> in disguise).</li>
<li>No <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/typeof">typeof</a> since, <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/typeof">typeof</a> is not a real solution to this problem but can <em>appear</em> to be due to the way the global scope is <em>implied</em>.</li>
</ul>


<h2>GIF FTW!</h2>

<p><a href="https://www.npmjs.org/package/selectn"><img src="http://nmotw.in/images/selectn/selectn.gif" alt="selectn" /></a>
Checkout the project's <code>readme.md</code> for <a href="https://github.com/wilmoore/selectn.js#usage-examples">more examples</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[color-thief]]></title>
    <link href="http://nmotw.in/color-thief/"/>
    <updated>2016-03-03T14:50:23+00:00</updated>
    <id>http://nmotw.in/color-thief</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/color-thief">color-thief</a></h1>

<blockquote><p>Grab the color palette or dominant color from an image!</p></blockquote>

<p><code>color-thief</code> helps to grab get the dominant color or the color palette from an image, this module makes use of JS, some cool math and the canvas tag to make it happen.</p>

<p><strong>Get it:</strong> <code>npm install --save color-thief</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">colorThief</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ColorThief</span><span class="p">();</span>
</span><span class='line'><span class="nx">colorThief</span><span class="p">.</span><span class="nx">getColor</span><span class="p">(</span><span class="nx">sourceImage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">getColor(sourceImage[, quality])</span>
</span><span class='line'><span class="cm">returns {r: num, g: num, b: num}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">colorThief</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ColorThief</span><span class="p">();</span>
</span><span class='line'><span class="nx">colorThief</span><span class="p">.</span><span class="nx">getPalette</span><span class="p">(</span><span class="nx">sourceImage</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">getPalette(sourceImage[, colorCount, quality])</span>
</span><span class='line'><span class="cm">returns [ [num, num, num], [num, num, num], ... ]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/color-thief/color-thief.gif" alt="color-thief" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[must]]></title>
    <link href="http://nmotw.in/must/"/>
    <updated>2016-02-25T13:59:29+00:00</updated>
    <id>http://nmotw.in/must</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/must">must</a></h1>

<blockquote><p>Testing and assertion library with friendly BDD syntax!</p></blockquote>

<p><code>must</code> provides a BDD syntax for all your assertions and it follows <a href="https://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a> with its use of <strong>MUST</strong>. Good and well testsed stuff.</p>

<p><strong>Get it:</strong> <code>npm install --save must</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;must/register&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[].</span><span class="nx">must</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">must</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">nonenumerable</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">42</span><span class="p">).</span><span class="nx">must</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span><span class="p">(</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">42</span><span class="p">).</span><span class="nx">must</span><span class="p">.</span><span class="nx">then</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">must</span><span class="p">.</span><span class="nx">eventually</span><span class="p">.</span><span class="nx">not</span><span class="p">.</span><span class="nx">include</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Problemo&quot;</span><span class="p">)).</span><span class="nx">must</span><span class="p">.</span><span class="nx">reject</span><span class="p">.</span><span class="kd">with</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="sr">/problem/i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/must/must.gif" alt="must.gif" /></p>

<p>We <code>must</code> thank <a href="https://twitter.com/theml">Andri M√∂ll</a> for <code>must</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipt]]></title>
    <link href="http://nmotw.in/ipt/"/>
    <updated>2016-02-18T16:07:50+00:00</updated>
    <id>http://nmotw.in/ipt</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ipt">ipt</a></h1>

<blockquote><p>The missing shell interactive workflow.</p></blockquote>

<p><code>ipt</code> (pronounced iPipeTo) introduces the missing cli interactive workflow.</p>

<p>It takes any kind of list as an input and uses that list to build an interactive interface to let you select an element from it.</p>

<p>Stop manually dragging your mouse around to copy output data from a terminal, using the ipt workflow you can pipe data from a command and select what to copy to clipboard from a convenient visual menu.</p>

<p>Selected data is also output to stdout allowing for easily composing various workflows - Just create your custom alias!</p>

<p>P.S: Couldn't explain it better than than author!</p>

<p><strong>GET IT:</strong> <code>npm install -g ipt</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git branch -a | ipt | xargs git checkout
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git --no-pager log --oneline | ipt | cut -d <span class="s1">&#39; &#39;</span> -f 1 | xargs -o git rebase -i<span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S: Don't miss to read the wonderful <a href="https://www.npmjs.com/package/ipt#examples">examples</a>!</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ipt/ipt.gif" alt="" /></p>

<p>Thanks to <a href="https://github.com/ruyadorno">Ruy Adorno</a> for this cheeky module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[why-is-node-running]]></title>
    <link href="http://nmotw.in/why-is-node-running/"/>
    <updated>2016-02-11T15:04:17+00:00</updated>
    <id>http://nmotw.in/why-is-node-running</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/why-is-node-running">why-is-node-running</a></h1>

<blockquote><p>Node is running but you don't know why? why-is-node-running is here to help you.</p></blockquote>

<p>This is a cheeky module that plays with <code>process.binding</code> of node, specifically with <code>process.binding('contextify').ContextifyScript;</code> the core of this library is from node's <a href="https://github.com/nodejs/node/blob/88307974e60346bc98c4e9f70a2b6918ccb6844f/src/node.js">source</a>.</p>

<p><strong>GET IT:</strong> <code>npm install --save why-is-node-running</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;why-is-node-running&#39;</span><span class="p">);</span> <span class="c1">// should be your first require </span>
</span><span class='line'><span class="kd">var</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;net&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">createServer</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">()</span> <span class="c1">// logs out active handles that are keeping node running </span>
</span><span class='line'><span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When executed in <code>/tmp</code> you see an output like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>There are 4 known handle<span class="o">(</span>s<span class="o">)</span> keeping the process running and 0 unknown
</span><span class='line'>Known handles:
</span><span class='line'>
</span><span class='line'><span class="c"># Timer</span>
</span><span class='line'>/private/tmp/l:6  - setInterval<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{}</span>, 1000<span class="o">)</span>;
</span><span class='line'>/private/tmp/l:10 - createServer<span class="o">()</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># TCP</span>
</span><span class='line'>/private/tmp/l:7  - server.listen<span class="o">(</span>0<span class="o">)</span>;
</span><span class='line'>/private/tmp/l:10 - createServer<span class="o">()</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># TCP</span>
</span><span class='line'>/private/tmp/l:7  - server.listen<span class="o">(</span>0<span class="o">)</span>;
</span><span class='line'>/private/tmp/l:11 - createServer<span class="o">()</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># Timer</span>
</span><span class='line'>/private/tmp/l:13 - setTimeout<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="https://nmotw.in/images/why-is-node-running/why-is-node-running.gif" alt="why-is-node-running" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[data.task]]></title>
    <link href="http://nmotw.in/data.task/"/>
    <updated>2016-02-04T14:26:02+00:00</updated>
    <id>http://nmotw.in/data.task</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/data.task">data.task</a></h1>

<blockquote><p>A structure for representing asynchronous actions with automatic resource handling.</p></blockquote>

<p><code>data.task</code> monad which can be used to replace Continuation-Passing Style form of programming,
in order to be able to compose and sequence time-dependent effects using the generic and powerful monadic operations.</p>

<p><strong>GET IT:</strong> <code>npm install --save data.task</code></p>

<p><strong>Sample Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;data.task&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">((</span><span class="nx">reject</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{})</span>
</span><span class='line'><span class="nx">Task</span> <span class="p">{</span> <span class="nx">fork</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span> <span class="nx">cleanup</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;data.task&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">read</span> <span class="o">=</span> <span class="nx">path</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">((</span><span class="nx">reject</span><span class="p">,</span> <span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">read</span><span class="p">(</span><span class="s1">&#39;/tmp/data.md&#39;</span><span class="p">).</span><span class="nx">fork</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW:</strong></p>

<p><img src="http://nmotw.in/images/data.task/data.task.gif" alt="data.task" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[platform]]></title>
    <link href="http://nmotw.in/platform/"/>
    <updated>2016-01-28T13:12:21+00:00</updated>
    <id>http://nmotw.in/platform</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/platform">platform</a></h1>

<blockquote><p>A platform detection library that works on nearly all JavaScript platforms.</p></blockquote>

<p>This module provides the below platfrom based information:</p>

<ul>
<li>description</li>
<li>layout</li>
<li>manufacturer</li>
<li>name</li>
<li>prerelease</li>
<li>product</li>
<li>ua</li>
<li>version</li>
<li>os</li>
</ul>


<p>It can also <code>parse</code> an <code>User-Agent</code> and give the same information.</p>

<p>P.S:<code>platform</code> is for informational purposes only &amp; not intended as a substitution for feature detection/inference checks.</p>

<p><strong>GET IT</strong> : <code>npm install --save platform</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">platform</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;platform&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// on an iPad</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// &#39;Safari&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">version</span><span class="p">;</span> <span class="c1">// &#39;5.1&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">product</span><span class="p">;</span> <span class="c1">// &#39;iPad&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">manufacturer</span><span class="p">;</span> <span class="c1">// &#39;Apple&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">layout</span><span class="p">;</span> <span class="c1">// &#39;WebKit&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">os</span><span class="p">;</span> <span class="c1">// &#39;iOS 5.0&#39;</span>
</span><span class='line'><span class="nx">platform</span><span class="p">.</span><span class="nx">description</span><span class="p">;</span> <span class="c1">// &#39;Safari 5.1 on Apple iPad (iOS 5.0)&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">platform</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7.2; en; rv:2.0) Gecko/20100101 Firefox/4.0 Opera 11.52&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// &#39;Opera&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">version</span><span class="p">;</span> <span class="c1">// &#39;11.52&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">layout</span><span class="p">;</span> <span class="c1">// &#39;Presto&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">os</span><span class="p">;</span> <span class="c1">// &#39;Mac OS X 10.7.2&#39;</span>
</span><span class='line'><span class="nx">info</span><span class="p">.</span><span class="nx">description</span><span class="p">;</span> <span class="c1">// &#39;Opera 11.52 (identifying as Firefox 4.0) on Mac OS X 10.7.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/platform/platform.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iron-node]]></title>
    <link href="http://nmotw.in/iron-node/"/>
    <updated>2016-01-21T16:20:46+00:00</updated>
    <id>http://nmotw.in/iron-node</id>
    <content type="html"><![CDATA[<h1><a href="http://s-a.github.io/iron-node/">iron-node</a></h1>

<blockquote><p>Debug Node.js code with Chrome Developer Tools.</p></blockquote>

<p>Yes you read it right <code>iron-node</code> helps you to debug your node code using chrome devtools, it makes use of <a href="http://electron.atom.io/">electron</a> creates a <code>browser-window</code>
opens the dev-tool re-compile native modules against electron!</p>

<p>It not only helps you to debug your code, but also helps to debug your node build scripts!</p>

<p>Keep in mind to place the keyword <code>debugger;</code> to a place where you want to stop.</p>

<p><strong>Get it:</strong> <code>npm install -g iron-node</code></p>

<p><strong>Sample usage:</strong></p>

<p><strong>CLI:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iron-node PATH_TO_NODE_JS_FILE [--customparm1=foo --customparm2=bar];</span></code></pre></td></tr></table></div></figure>


<p><strong>npm scripts:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ...
</span><span class='line'>  "scripts": {
</span><span class='line'>    ...
</span><span class='line'>    "debug-mocha": "iron-node node_modules/mocha/bin/_mocha",
</span><span class='line'>    "debug-grunt": "iron-node node_modules/grunt-cli/bin/grunt build",
</span><span class='line'>    "debug-gulp": "iron-node node_modules/gulp/bin/gulp.js",
</span><span class='line'>    ...
</span><span class='line'>  },
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/iron-node/iron-node.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fp-dom]]></title>
    <link href="http://nmotw.in/fp-dom/"/>
    <updated>2016-01-14T16:52:27+00:00</updated>
    <id>http://nmotw.in/fp-dom</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fp-dom">fp-dom</a></h1>

<blockquote><p>A collection of functions to favor functional programming in a DOM context.</p></blockquote>

<p>DOM operations in a functional way with <code>fp-dom</code>, it provides support for the below methods:</p>

<ul>
<li>animate</li>
<li>append</li>
<li>addClass</li>
<li>removeClass</li>
<li>toggleClass</li>
<li>hasClass</li>
<li>contains</li>
<li>elem</li>
<li>insertAfter</li>
<li>insertBefore</li>
<li>interval</li>
<li>isdom</li>
<li>isvdom</li>
<li>listen</li>
<li>prepend</li>
<li>replace</li>
<li>select</li>
<li>selectOne</li>
<li>setattr</li>
<li>timeout</li>
<li>velem</li>
</ul>


<p><strong>Get it</strong>: <code>npm install --save fp-dom</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">fpdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fp-dom&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">appendtoBody</span> <span class="o">=</span> <span class="nx">fpdom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">h1</span> <span class="o">=</span> <span class="nx">fpdom</span><span class="p">.</span><span class="nx">elem</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">,</span><span class="s1">&#39;meow&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">appendtoBody</span><span class="p">(</span><span class="nx">h1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fp-dom/fp-dom.gif" alt="fp-dom" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ineed]]></title>
    <link href="http://nmotw.in/ineed/"/>
    <updated>2016-01-07T16:32:52+00:00</updated>
    <id>http://nmotw.in/ineed</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ineed">ineed</a></h1>

<blockquote><p>Web scraping and HTML-reprocessing. The easy way.</p></blockquote>

<p><img src="http://nmotw.in/images/ineed/ineed-logo.png" alt="ineed-logo" /></p>

<p><code>ineed</code> allows you collect useful data from web pages using simple and nice API.</p>

<p>It doesn't build and traverse DOM-tree, it operates on sequence of HTML tokens instead. Whole processing is done in one-pass, therefore, it's blazing fast!</p>

<p><strong>Get it:</strong> <code>npm install --save ineed</code></p>

<p><strong>Usage:</strong> <code>ineed.&lt;action&gt;[.&lt;plugin&gt;...].&lt;from*&gt;</code></p>

<p>Where <code>action</code> could be: <code>collect</code> or <code>reprocess</code></p>

<p><code>plugin</code> could be one of: <code>.comments</code> <code>.cssCode</code> <code>.hyperlinks</code> <code>.images</code> <code>.jsCode</code> <code>.scripts</code> <code>.stylesheets</code> <code>.texts</code> <code>.title</code></p>

<p><code>from</code> could be: <code>from</code> or <code>fromHtml</code></p>

<p>P.S: One could write a custom plugin using the <code>.using()</code> method.</p>

<p><strong>Code sample:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ineed</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ineed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ineed</span><span class="p">.</span><span class="nx">collect</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">hyperlinks</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">stylesheets</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;http://nmotw.in&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ineed</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ineed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">ineed</span><span class="p">.</span><span class="nx">collect</span><span class="p">.</span><span class="nx">texts</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">fromHtml</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ineed/ineed.gif" alt="ineed" /></p>

<p>Thanks to <a href="https://twitter.com/nilukini">Ivan Nikulin</a> for this cheeky module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stack-trace]]></title>
    <link href="http://nmotw.in/stack-trace/"/>
    <updated>2015-12-31T17:47:09+00:00</updated>
    <id>http://nmotw.in/stack-trace</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/stack-trace">stack-trace</a></h1>

<blockquote><p>Get v8 stack traces as an array of CallSite objects.</p></blockquote>

<p><strong>Get it:</strong> <code>npm install --save stack-trace</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">stackTrace</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;stack-trace&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">trace</span> <span class="o">=</span> <span class="nx">stackTrace</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">stackTrace</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;stack-trace&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;something went wrong&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">trace</span> <span class="o">=</span> <span class="nx">stackTrace</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>trace</code> would have CallSite objects and each object will have the below methods:</p>

<ul>
<li><strong>getThis</strong>: returns the value of this</li>
<li><strong>getTypeName</strong>: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object's [[Class]] internal property.</li>
<li><strong>getFunction</strong>: returns the current function</li>
<li><strong>getFunctionName</strong>: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function's context.</li>
<li><strong>getMethodName</strong>: returns the name of the property of this or one of its prototypes that holds the current function</li>
<li><strong>getFileName</strong>: if this function was defined in a script returns the name of the script</li>
<li><strong>getLineNumber</strong>: if this function was defined in a script returns the current line number</li>
<li><strong>getColumnNumber</strong>: if this function was defined in a script returns the current column number</li>
<li><strong>getEvalOrigin</strong>: if this function was created using a call to eval returns a CallSite object representing the location where eval was called</li>
<li><strong>isToplevel</strong>: is this a toplevel invocation, that is, is this the global object?</li>
<li><strong>isEval</strong>: does this call take place in code defined by a call to eval?</li>
<li><strong>isNative</strong>: is this call in native V8 code?</li>
<li><strong>isConstructor</strong>: is this a constructor call?</li>
</ul>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/stack-trace/stack-trace.gif" alt="stack-trace" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[is-christmas]]></title>
    <link href="http://nmotw.in/is-christmas/"/>
    <updated>2015-12-24T14:32:35+00:00</updated>
    <id>http://nmotw.in/is-christmas</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/is-christmas">is-christmas</a></h1>

<blockquote><p>üéÖ Is today Christmas? üéÑ</p></blockquote>

<p>Simple fun module that returns <code>true</code> or <code>false</code> if it's Christmas or not.</p>

<p><strong>Get it:</strong></p>

<p><code>$ npm install --save is-christmas</code></p>

<p><code>$ npm install --global is-christmas</code> // for CLI</p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">isChristmas</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;is-christmas&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">isChristmas</span><span class="p">();</span>
</span><span class='line'><span class="c1">//=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>is-christmas --help
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    is-christmas
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>is-christmas
</span><span class='line'>    <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/is-christmas/is-christmas.gif" alt="is-christmas" /></p>

<p>Thanks to <a href="https://twitter.com/thejameskyle">James Kyle</a> for this fun module for this Christmas üòâ</p>
]]></content>
  </entry>
  
</feed>
