<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2016-10-13T14:17:21+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[yarn]]></title>
    <link href="http://nmotw.in/github/yarn/"/>
    <updated>2016-10-13T14:07:03+00:00</updated>
    <id>http://nmotw.in/github/yarn</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/yarn">yarn</a></h1>

<blockquote><p>FAST, RELIABLE, AND SECURE DEPENDENCY MANAGEMENT.</p></blockquote>

<p><code>yarn</code> let use call it a faster <code>npm</code>? Open sourced by facebook, has the below features:</p>

<ul>
<li>Offline Mode: If you've installed a package before, you can install it again without any internet connection.</li>
<li>Deterministic: The same dependencies will be installed the same exact way across every machine regardless of install order.</li>
<li>Network Performance: Yarn efficiently queues up requests and avoids request waterfalls in order to maximize network utilization.</li>
<li>Multiple Registries: Install any package from either npm or Bower and keep your package workflow the same.</li>
<li>Network Resilience: A single request failing won't cause an install to fail. Requests are retried upon failure.</li>
<li>Flat Mode: Resolve mismatching versions of dependencies to a single version to avoid creating duplicates.</li>
<li>More emojis. üêà</li>
</ul>


<p><strong>Get it:</strong> <code>npm install --global yarn</code></p>

<p><strong>CLI usage:</strong></p>

<p><code>sh
yarn add
yarn bin
yarn cache
yarn check
yarn clean
yarn config
yarn generate-lock-entry
yarn global
yarn info
yarn init
yarn install
yarn licenses
yarn link
yarn login
yarn logout
yarn ls
yarn outdated
yarn owner
yarn pack
yarn publish
yarn remove
yarn run
yarn self-update
yarn tag
yarn team
yarn test
yarn unlink
yarn upgrade
yarn version
yarn why
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/yarn/yarn.gif" alt="yarn" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[auto-install]]></title>
    <link href="http://nmotw.in/github/auto-install/"/>
    <updated>2016-09-01T14:05:36+00:00</updated>
    <id>http://nmotw.in/github/auto-install</id>
    <content type="html"><![CDATA[<h1><a href="https://nmp.im/auto-install">auto-install</a></h1>

<blockquote><p>Auto installs dependencies as you code on save.</p></blockquote>

<p>Have you ever wished that need to having a tool that would just do an <code>npm install</code> of modules that you <code>import</code>?</p>

<p>Well, here is <code>auto-install</code> that does exactly what you wished for!</p>

<p><strong>Get it:</strong> <code>npm install -g auto-install</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh</p>

<h1>In case you run it in a folder that doesn't have a <code>package.json</code></h1>

<p>$ auto-install --help
package.json does not exist
You can create one by using <code>npm init</code></p>

<h1>With a package.json</h1>

<p>$ auto-install
Watchers initialized</p>

<p>```</p>

<p><strong>CLI Flags:</strong></p>

<p><code>--secure</code>  Install popular modules only (> 10k downloads in the last month)</p>

<p><code>--exact</code>   Install exact version similar to <code>npm install express --save-exact</code></p>

<p><code>--dont-uninstall</code>   Do not uninstall unused modules</p>

<p>P.S: <a href="https://github.com/siddharthkp/auto-install/issues/6">Does it protect against typosquatting?</a></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/auto-install/auto-install.gif" alt="auto-install" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[next-update]]></title>
    <link href="http://nmotw.in/github/next-update/"/>
    <updated>2016-08-11T13:40:05+00:00</updated>
    <id>http://nmotw.in/github/next-update</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/next-update">next-update</a></h1>

<blockquote><p>Can I update the dependencies without breaking the tests?</p></blockquote>

<p>Summarizing <code>next-update</code> from the authors own words:</p>

<ul>
<li>A good workflow using <em>next-update</em>

<ul>
<li>see available new versions <code>next-update --available</code></li>
<li>check latest version of each module using <code>next-update --latest</code></li>
<li>install new versions of the desired modules using standard <code>npm i dependency@version --save</code></li>
</ul>
</li>
<li>You can use custom test command, for example <code>next-update -t "grunt test"</code>

<ul>
<li><code>npm test</code> is used by default.</li>
</ul>
</li>
<li>You can keep each working version in package.json by using <code>--keep</code> flag.</li>
</ul>


<p><strong>Get it:</strong></p>

<p><code>npm install -g next-update  // installs module globally</code></p>

<p><code>npm install --save-dev next-update</code></p>

<p>In your <code>package.json</code> :</p>

<p>```js
{</p>

<pre><code>"scripts": {
    "next-update": "next-update -k true --tldr"
}
</code></pre>

<p>}
```</p>

<p><strong>Sample usage:</strong></p>

<p>```js
$ next-update --help | pbcopy
next-update - Tests if module's dependencies can be updated to the newer version without breaking the tests
  version: 1.2.2
  author: {"email":"gleb.bahmutov@gmail.com","name":"Gleb Bahmutov"}</p>

<p>Options:
  --revert           install original module versions listed in package.json   [default: false]
  --available, -a    only query available later versions, do not test them     [default: false]
  --module, -m       checks specific module, can include version name@version  [default: null]
  --latest, -l       only check latest available update                        [default: true]
  --color, -c        color terminal output (if available)                      [default: true]
  --version, -v      show version and exit                                     [default: false]
  --test, -t         custom test command to run instead of npm test        <br/>
  --skip             skip running tests first                                  [default: false]
  --all              install all modules at once before testing                [default: false]
  --keep, -k         keep tested version if it is working                      [default: false]
  --allow            allow major / minor / patch updates                       [default: "major"]
  --type             check dependencies of type (all, prod, dev, peer)         [default: "all"]
  --tldr             only print VERY important log messages                    [default: false]
  --changed-log, -L  print commit changes between working versions             [default: true]
```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/next-update/next-update.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[listr]]></title>
    <link href="http://nmotw.in/github/listr/"/>
    <updated>2016-07-07T10:03:39+00:00</updated>
    <id>http://nmotw.in/github/listr</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/listr">listr</a></h1>

<blockquote><p>Terminal task list.</p></blockquote>

<p><code>listr</code> is one of those cheeky üíÑ modules for your CLI apps.</p>

<p>Below is the gist of this module:</p>

<ul>
<li><p><code>listr</code> accepts an array of tasks, where each task in a object consisting of <code>title</code> (string) and <code>task</code> (method).</p></li>
<li><p>If a task returns, it means the task was completed succesfully.</p></li>
<li><p>If a task throws an error, the task failed.</p></li>
<li><p>Task can be async by returning a Promise.</p></li>
<li><p>Task can be an Observable.</p></li>
<li><p>Task can also be a stream, which is in-turn converted to an Observable.</p></li>
<li><p>An instance of <code>listr</code> has <code>add(task)</code>, <code>task</code> and <code>run</code> methods. (Names are self explanatory?)</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install --save listr</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
const tasks = new Listr([</p>

<pre><code>{
    title: 'Success',
    task: () =&gt; 'Foo'
},
{
    title: 'Failure',
    task: () =&gt; {
        throw new Error('Bar')
    }
}
</code></pre>

<p>]);
```</p>

<p>```js
tasks.run().catch(err => {</p>

<pre><code>console.error(err);
</code></pre>

<p>});
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/listr/listr.gif" alt="listr" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-nightly]]></title>
    <link href="http://nmotw.in/github/node-nightly/"/>
    <updated>2016-06-30T12:31:14+00:00</updated>
    <id>http://nmotw.in/github/node-nightly</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/node-nightly">node-nightly</a></h1>

<blockquote><p>node-nightly at your finger tips!</p></blockquote>

<p><code>node-nightly</code> as the name says it's the nightly version of <code>node</code>, basically:</p>

<ul>
<li><p>Check if nightly version of node is available if not install it. (For the first time.)</p></li>
<li><p>If there is a new version available will notify the user saying there is a newer version available and can update using <code>node-nightly --update</code></p></li>
</ul>


<p><strong>Get it</strong> : <code>npm install -g node-nightly</code> # Preferred global</p>

<p><strong>Sample usage:</strong></p>

<p>```js
$ node-nightly --inspect --debug-brk index.js
Debugger listening on port 9229.
To start debugging, open the following URL in Chrome:</p>

<pre><code>chrome-devtools://devtools/remote/serve_file/@521e5b7e2b7cc66b4006a8a54cb9c4e57494a5ef/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node
</code></pre>

<p>Debugger attached.
Waiting for the debugger to disconnect...
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/node-nightly/node-nightly.gif" alt="node-nightly" /></p>
]]></content>
  </entry>
  
</feed>
