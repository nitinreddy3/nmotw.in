<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2016-08-25T13:54:03+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[next-update]]></title>
    <link href="http://nmotw.in/github/next-update/"/>
    <updated>2016-08-11T13:40:05+00:00</updated>
    <id>http://nmotw.in/github/next-update</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/next-update">next-update</a></h1>

<blockquote><p>Can I update the dependencies without breaking the tests?</p></blockquote>

<p>Summarizing <code>next-update</code> from the authors own words:</p>

<ul>
<li>A good workflow using <em>next-update</em>

<ul>
<li>see available new versions <code>next-update --available</code></li>
<li>check latest version of each module using <code>next-update --latest</code></li>
<li>install new versions of the desired modules using standard <code>npm i dependency@version --save</code></li>
</ul>
</li>
<li>You can use custom test command, for example <code>next-update -t "grunt test"</code>

<ul>
<li><code>npm test</code> is used by default.</li>
</ul>
</li>
<li>You can keep each working version in package.json by using <code>--keep</code> flag.</li>
</ul>


<p><strong>Get it:</strong></p>

<p><code>npm install -g next-update  // installs module globally</code></p>

<p><code>npm install --save-dev next-update</code></p>

<p>In your <code>package.json</code> :</p>

<p>```js
{</p>

<pre><code>"scripts": {
    "next-update": "next-update -k true --tldr"
}
</code></pre>

<p>}
```</p>

<p><strong>Sample usage:</strong></p>

<p>```js
$ next-update --help | pbcopy
next-update - Tests if module's dependencies can be updated to the newer version without breaking the tests
  version: 1.2.2
  author: {"email":"gleb.bahmutov@gmail.com","name":"Gleb Bahmutov"}</p>

<p>Options:
  --revert           install original module versions listed in package.json   [default: false]
  --available, -a    only query available later versions, do not test them     [default: false]
  --module, -m       checks specific module, can include version name@version  [default: null]
  --latest, -l       only check latest available update                        [default: true]
  --color, -c        color terminal output (if available)                      [default: true]
  --version, -v      show version and exit                                     [default: false]
  --test, -t         custom test command to run instead of npm test        <br/>
  --skip             skip running tests first                                  [default: false]
  --all              install all modules at once before testing                [default: false]
  --keep, -k         keep tested version if it is working                      [default: false]
  --allow            allow major / minor / patch updates                       [default: "major"]
  --type             check dependencies of type (all, prod, dev, peer)         [default: "all"]
  --tldr             only print VERY important log messages                    [default: false]
  --changed-log, -L  print commit changes between working versions             [default: true]
```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/next-update/next-update.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[listr]]></title>
    <link href="http://nmotw.in/github/listr/"/>
    <updated>2016-07-07T10:03:39+00:00</updated>
    <id>http://nmotw.in/github/listr</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/listr">listr</a></h1>

<blockquote><p>Terminal task list.</p></blockquote>

<p><code>listr</code> is one of those cheeky ðŸ’„ modules for your CLI apps.</p>

<p>Below is the gist of this module:</p>

<ul>
<li><p><code>listr</code> accepts an array of tasks, where each task in a object consisting of <code>title</code> (string) and <code>task</code> (method).</p></li>
<li><p>If a task returns, it means the task was completed succesfully.</p></li>
<li><p>If a task throws an error, the task failed.</p></li>
<li><p>Task can be async by returning a Promise.</p></li>
<li><p>Task can be an Observable.</p></li>
<li><p>Task can also be a stream, which is in-turn converted to an Observable.</p></li>
<li><p>An instance of <code>listr</code> has <code>add(task)</code>, <code>task</code> and <code>run</code> methods. (Names are self explanatory?)</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install --save listr</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
const tasks = new Listr([</p>

<pre><code>{
    title: 'Success',
    task: () =&gt; 'Foo'
},
{
    title: 'Failure',
    task: () =&gt; {
        throw new Error('Bar')
    }
}
</code></pre>

<p>]);
```</p>

<p>```js
tasks.run().catch(err => {</p>

<pre><code>console.error(err);
</code></pre>

<p>});
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/listr/listr.gif" alt="listr" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-nightly]]></title>
    <link href="http://nmotw.in/github/node-nightly/"/>
    <updated>2016-06-30T12:31:14+00:00</updated>
    <id>http://nmotw.in/github/node-nightly</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/node-nightly">node-nightly</a></h1>

<blockquote><p>node-nightly at your finger tips!</p></blockquote>

<p><code>node-nightly</code> as the name says it's the nightly version of <code>node</code>, basically:</p>

<ul>
<li><p>Check if nightly version of node is available if not install it. (For the first time.)</p></li>
<li><p>If there is a new version available will notify the user saying there is a newer version available and can update using <code>node-nightly --update</code></p></li>
</ul>


<p><strong>Get it</strong> : <code>npm install -g node-nightly</code> # Preferred global</p>

<p><strong>Sample usage:</strong></p>

<p>```js
$ node-nightly --inspect --debug-brk index.js
Debugger listening on port 9229.
To start debugging, open the following URL in Chrome:</p>

<pre><code>chrome-devtools://devtools/remote/serve_file/@521e5b7e2b7cc66b4006a8a54cb9c4e57494a5ef/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node
</code></pre>

<p>Debugger attached.
Waiting for the debugger to disconnect...
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/node-nightly/node-nightly.gif" alt="node-nightly" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rainbowify]]></title>
    <link href="http://nmotw.in/github/rainbowify/"/>
    <updated>2016-06-16T14:03:58+00:00</updated>
    <id>http://nmotw.in/github/rainbowify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/rainbowify">rainbowify</a></h1>

<blockquote><p>rainbow print stuff in terminal</p></blockquote>

<p><code>rainbowify</code> is an module extracted from mocha's <a href="https://github.com/mochajs/mocha/blob/master/lib/reporters/nyan.js">nyan.js</a> which is a fun little module
that helps to print rainbow text on the terminal.</p>

<p><strong>Get it:</strong> <code>npm install --global rainbowify</code></p>

<p><strong>Usage:</strong></p>

<p><code>sh
$ echo &lt;some_text&gt; | rainbowify
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/rainbowify/rainbowify.gif" alt="rainbowify" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pwaify]]></title>
    <link href="http://nmotw.in/github/pwaify/"/>
    <updated>2016-06-09T12:33:41+00:00</updated>
    <id>http://nmotw.in/github/pwaify</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/pwaify">pwaify</a></h1>

<blockquote><p>PWA to desktop app!</p></blockquote>

<p><code>pwaify</code> bring <a href="https://developers.google.com/web/progressive-web-apps/">progressive</a> <a href="https://github.com/hemanth/generator-pwa">Webapp</a> to your desktops across platforms!</p>

<p>Makes use of <a href="http://electron.atom.io/">Electron</a> extracts the <code>manifest-json</code> from the given URL and smartly creates an electron window and loads the required.</p>

<p><strong>Get it:</strong> <code>npm install --global pwaify</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
nmotw.in> pwaify --help</p>

<p>  Electron PWA (Progressive Web App) Generator</p>

<p>  Usage</p>

<pre><code>$ pwaify &lt;input&gt;
</code></pre>

<p>  Options</p>

<pre><code>--platforms Platforms to build the app.
--icon App Icon.
</code></pre>

<p>  Examples</p>

<pre><code>$ pwaify https://jsfeatures.in --platforms=darwin
</code></pre>

<p>```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/pwaify/PWAify.gif" alt="PWAify" /></p>
]]></content>
  </entry>
  
</feed>
