<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: npm | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/npm/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2016-06-30T12:39:27+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[trymodule]]></title>
    <link href="http://nmotw.in/github/trymodule/"/>
    <updated>2016-03-31T13:11:49+00:00</updated>
    <id>http://nmotw.in/github/trymodule</id>
    <content type="html"><![CDATA[<h1><a href="">trymodule</a></h1>

<blockquote><p>It's never been easier to try nodejs modules!</p></blockquote>

<p>Quickly install any node module you want and start a <code>REPL</code> with the installed module in the scope with <code>trymodule</code>!</p>

<p>Basically, it check if the module you are trying exists in the <code>~/.trymodule/node_module</code> if require it and start a <code>REPL</code> or
else installs it using <code>npmi</code> module and starts the <code>REPL</code>.</p>

<p><strong>Get it:</strong> <code>npm install -g trymodule</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
nmotw.in> trymodule xkcd-imgs
Gonna start a REPL with packages installed and loaded for you
Couldn't find 'xkcd-imgs' locally, gonna download it now
xkcd-imgs@1.0.1 ../../Users/hhegadehallimadh/.trymodule/node_modules/xkcd-imgs
└── request@2.69.0 (aws-sign2@0.6.0, forever-agent@0.6.1, tunnel-agent@0.4.2, oauth-sign@0.8.1, caseless@0.11.0, is-typedarray@1.0.0, stringstream@0.0.5, isstream@0.1.2, json-stringify-safe@5.0.1, extend@3.0.0, tough-cookie@2.2.2, node-uuid@1.4.7, qs@6.0.2, mime-types@2.1.10, form-data@1.0.0-rc4, combined-stream@1.0.5, hawk@3.1.3, aws4@1.3.2, http-signature@1.1.1, bl@1.0.3, har-validator@2.0.6)
Package 'xkcd-imgs' was loaded and assigned to 'xkcd_imgs' in the current scope
REPL started...</p>

<blockquote><p>```</p></blockquote>

<p>```js</p>

<blockquote><p>xkcd_imgs
{ img: [Function] }
xkcd_imgs.img( (err, res) => console.log(res) );
undefined
{ url: 'http://imgs.xkcd.com/comics/instagram.png',
  title: 'I\'m gonna call the cops and get Chad arrested for theft, then move all my stuff to the house across the street. Hopefully the owners there are more responsible.' }
```</p></blockquote>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/trymodule/trymodule.gif" alt="trymodule" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fixpack]]></title>
    <link href="http://nmotw.in/github/fixpack/"/>
    <updated>2016-03-17T11:08:38+00:00</updated>
    <id>http://nmotw.in/github/fixpack</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fixpack">fixpack</a></h1>

<blockquote><p>A <code>package.json</code> file scrubber for the truly insane.</p></blockquote>

<p><strong>GET IT:</strong> <code>npm install -g fixpack</code></p>

<p>It will re-write your package.json file as follows:</p>

<ul>
<li>name first</li>
<li>description second</li>
<li>version third</li>
<li>author fourth</li>
<li>all other keys in alphabetical order</li>
<li>dependencies and devDependencies sorted alphabetically</li>
<li>newline at the end of the file</li>
</ul>


<p>It will warn you if any of these are missing:</p>

<ul>
<li>description</li>
<li>author</li>
<li>repository</li>
<li>keywords</li>
<li>main</li>
<li>bugs</li>
<li>homepage</li>
<li>license</li>
</ul>


<p>It can also read a config from <code>.fixpackrc</code>:</p>

<p>```
{</p>

<pre><code>// will put these first in this order if present
sortToTop: [
    'name',
    'description',
    'version',
    'author'
],
// will error if these not present
required: [
    'name',
    'version'
],
// will warn if these not present
warn: [
    'description',
    'author',
    'repository',
    'keywords',
    'main',
    'bugs',
    'homepage',
    'license'
],
// if `private: true` in package.json will use the next two lists instead
requiredOnPrivate: [],
warnOnPrivate: ['name', 'version', 'description', 'main'],
// sub items to sort by default
sortedSubItems: [
    'dependencies',
    'devDependencies',
    'jshintConfig',
    'scripts',
    'keywords'
],
// if you set quiet to true it won't do output anything to the console
quiet: false,
// files to scrub
files: ['package.json'],
// Will set all deps to '*'
// this may be useful because then you can
// run npm update --save &amp;&amp; npm update --save-dev
// to install latest stable releases of everything.
wipe: false
</code></pre>

<p>}
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/fixpack/fixpack.gif" alt="fixpack" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm-check]]></title>
    <link href="http://nmotw.in/github/npm-check/"/>
    <updated>2015-09-10T14:28:00+00:00</updated>
    <id>http://nmotw.in/github/npm-check</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/npm-check">npm-check</a></h1>

<blockquote><p>Check for outdated, incorrect, and unused dependencies.</p></blockquote>

<p><strong>Features:</strong></p>

<ul>
<li><em>Interactive Update</em> means less typing.</li>
<li>Scoped packages support for the modern npm user.</li>
<li>Works with public and private registries.</li>
<li>Won't query npm registry for packages with <code>private: true</code>.</li>
<li>Kindly informs you if a dependency is not being used.</li>
<li>Emoji in a command-line app, because command-line apps can be fun too.</li>
</ul>


<p>Very much similar to <a href="http://nmotw.in/npm-check-updates/">npm-check-updates</a> but far more generic and interactive!</p>

<p><strong>Get it:</strong> <code>npm install -g npm-check</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
$ npm-check --help</p>

<p>  Usage: npm-check [options]</p>

<p>  Options:</p>

<pre><code>-h, --help         output usage information
-V, --version      output the version number
-u, --update       Interactive update.
-g, --global       Look at global modules.
-s, --skip-unused  Skip check for unused packages.
-p, --production   Ignore devDependencies.
</code></pre>

<p>```</p>

<p>```js
var npmCheck = require('npm-check');</p>

<p>npmCheck(options)
  .then(result);
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/npm-check/npm-check.gif" alt="npm-check" /></p>

<p>Thanks to <a href="https://twitter.com/dylang">@dylang</a> for <code>npm-check</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nsp]]></title>
    <link href="http://nmotw.in/github/nsp/"/>
    <updated>2015-01-22T13:33:18+00:00</updated>
    <id>http://nmotw.in/github/nsp</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/nsp/">nsp</a> aka: <a href="http://nodesecurity.io">Node Security Project</a></h1>

<blockquote><p>Check if your Node.js projects are using packages with known and public vulnerable dependencies, using NSP DB.</p></blockquote>

<p><strong>Install it:</strong> <code>npm install -g nsp</code></p>

<p><strong>Usage:</strong></p>

<p>```sh
nmotw.in> nsp</p>

<p>Usage: [command] --arg=value --arg2</p>

<p>Help:
  help              Show help menu
  [cmd] help        Show command help menu</p>

<p>Options:
  version           shows the current version of nsp
  shrinkwrap        alias to audit-shrinkwrap
  audit-shrinkwrap  audits your <code>npm shrinkwrap</code> against NSP db
  package           alias to audit-package
  audit-package     audits your package.json against NSP db
```</p>

<p>```sh
nmotw.in> cat package.json
{
  "name": "test",
  "version": "0.0.1",
  "author": "Node Security Project",
  "dependencies": {</p>

<pre><code>"node-print": "0.0.4",
"request": "^2.40.0",
"qs": "^0.5"
</code></pre>

<p>  }
}</p>

<p>nmotw.in> nsp package
Name  Installed  Patched  Vulnerable Dependency
qs      0.5.6     >= 1.x  test@0.0.1 > qs@0.5.6
```</p>

<p>The same can be used for auditing <a href="https://docs.npmjs.com/cli/shrinkwrap">shrinkwrap</a>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/nsp/nsp.gif" alt="nsp" /></p>

<p>Thanks to the <a href="https://twitter.com/nodesecurity">nodesecurity</a> for making security easy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm-check-updates]]></title>
    <link href="http://nmotw.in/github/npm-check-updates/"/>
    <updated>2014-11-20T14:52:16+00:00</updated>
    <id>http://nmotw.in/github/npm-check-updates</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.org/package/npm-check-updates">npm-check-updates</a></h1>

<p>Finding all updates to dependencies and updating them is very easy with <code>npm-check-updates</code>.</p>

<p><strong>Install it globally:</strong> <code>npm install -g npm-check-updates</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
$ npm-check-updates
npm http GET http://registry.npmjs.org/read-chunk
npm http GET http://registry.npmjs.org/mocha
npm http GET http://registry.npmjs.org/browserify
npm http 304 http://registry.npmjs.org/browserify
npm http 304 http://registry.npmjs.org/read-chunk
npm http 304 http://registry.npmjs.org/mocha</p>

<p>"browserify" can be updated from ^3.0.0 to ^6.3.2 (Installed: 3.44.2, Latest: 6.3.2)
"read-chunk" can be updated from ^0.1.0 to ^1.0.0 (Installed: 0.1.0, Latest: 1.0.0)
<code>
</code>sh
$ npm-check-updates -u</p>

<p>"browserify" can be updated from ^3.0.0 to ^6.3.2 (Installed: 3.44.2, Latest: 6.3.2)
"read-chunk" can be updated from ^0.1.0 to ^1.0.0 (Installed: 0.1.0, Latest: 1.0.0)</p>

<p>package.json upgraded</p>

<p>$ npm-check-updates</p>

<p>All dependencies match the latest package versions :)</p>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/npm-check-updates/npm-check-updates.gif" alt="" /></p>

<p>Thanks to Tomas Junnonen for this cute little util.</p>
]]></content>
  </entry>
  
</feed>
