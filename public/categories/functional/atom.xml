<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: functional | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/functional/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2016-10-06T17:36:05+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[data.task]]></title>
    <link href="http://nmotw.in/github/data.task/"/>
    <updated>2016-02-04T14:26:02+00:00</updated>
    <id>http://nmotw.in/github/data.task</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/data.task">data.task</a></h1>

<blockquote><p>A structure for representing asynchronous actions with automatic resource handling.</p></blockquote>

<p><code>data.task</code> monad which can be used to replace Continuation-Passing Style form of programming,
in order to be able to compose and sequence time-dependent effects using the generic and powerful monadic operations.</p>

<p><strong>GET IT:</strong> <code>npm install --save data.task</code></p>

<p><strong>Sample Usage:</strong></p>

<p>```js
var Task = require('data.task');</p>

<blockquote><p>new Task((reject, resolve) => {})
Task { fork: [Function], cleanup: [Function] }
```</p></blockquote>

<p>```js
var Task = require('data.task');
var read = path => {
return new Task((reject, resolve) => {
  fs.readFile(path, (err, data) => {</p>

<pre><code>    if (err)  {
      reject(err)
    } else {
      resolve(data) 
    }
});
</code></pre>

<p>  });
};
read('/tmp/data.md').fork(console.error, console.log);
```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/data.task/data.task.gif" alt="data.task" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[as]]></title>
    <link href="http://nmotw.in/github/as/"/>
    <updated>2015-12-17T16:34:55+00:00</updated>
    <id>http://nmotw.in/github/as</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/as">as</a></h1>

<blockquote><p>Convert easily, back and forth between array and object.</p></blockquote>

<p>A sweet and simple util that help you to convert array to object and vise versa, it also:</p>

<ul>
<li><p>Brings all functional goodness of arrays to objects.</p></li>
<li><p>Brings the flexibility of objects to arrays.</p></li>
<li><p>Works well with a functional programming library.</p></li>
</ul>


<p><strong>Get it</strong>: <code>npm install --save as</code></p>

<p><strong>Usage:</strong></p>

<p>```js
var asArray = require("as/array");</p>

<p>asArray(
  {a: 1, b: 2}
  );
// [ {key: "a", value: 1}
// , {key: "b", value: 2}
// ]
```</p>

<p><code>js
var asObject = require("as/object");
asObject(
  [ {key: "a", value: 1}
  , {key: "b", value: 2}
  ]);
// {a: 1, b: 2}
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/as/as.gif" alt="" /></p>

<p>Thanks for</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ramda-repl]]></title>
    <link href="http://nmotw.in/github/ramda-repl/"/>
    <updated>2015-09-17T16:39:50+00:00</updated>
    <id>http://nmotw.in/github/ramda-repl</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ramda-repl">ramda-repl</a></h1>

<blockquote><p><a href="http://ramdajs.com/">Ramda</a> + <a href="https://www.npmjs.com/package/ramda-fantasy">ramda-fantasy</a> REPL</p></blockquote>

<p><code>ramda-repl</code> extends node REPL to bring in <code>Ramda</code> and <code>ramda-fantasy</code> so that you can use all of uber cool feature of ramda!</p>

<p><strong>Get it:</strong></p>

<p><code>
$ npm install --save ramda-repl
</code></p>

<p><strong>usage:</strong></p>

<p>```js
var ramdaRepl = require('ramda-repl');</p>

<p>ramdaRepl();
//=> Will start a REPL
```</p>

<h2>CLI</h2>

<p><code>sh
$ npm install --global ramda-repl
</code></p>

<p>$ ramda-repl</p>

<p><strong>Will start a REPL as below with <code>R</code> as well as current context is extended with ramda</strong></p>

<p>```
Welcome to Ramda REPL!</p>

<p>λ > typeof R
'object'</p>

<p>λ > typeof map
'function'</p>

<p>λ > typeof zipWith
'function'</p>

<p>```</p>

<h2>GIF FTW</h2>

<p><img src="/images/ramda-repl/ramda-repl.gif" alt="ramda-repl" /></p>

<h2>License</h2>

<p>MIT © <a href="http://h3manth.com">Hemanth.HM</a></p>
]]></content>
  </entry>
  
</feed>
