<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dom | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/dom/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2016-10-27T14:51:18+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[color-thief]]></title>
    <link href="http://nmotw.in/github/color-thief/"/>
    <updated>2016-03-03T14:50:23+00:00</updated>
    <id>http://nmotw.in/github/color-thief</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/color-thief">color-thief</a></h1>

<blockquote><p>Grab the color palette or dominant color from an image!</p></blockquote>

<p><code>color-thief</code> helps to grab get the dominant color or the color palette from an image, this module makes use of JS, some cool math and the canvas tag to make it happen.</p>

<p><strong>Get it:</strong> <code>npm install --save color-thief</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var colorThief = new ColorThief();
colorThief.getColor(sourceImage);</p>

<p>/<em>
getColor(sourceImage[, quality])
returns {r: num, g: num, b: num}
</em>/
```</p>

<p>```js
var colorThief = new ColorThief();
colorThief.getPalette(sourceImage, 8);</p>

<p>/<em>
getPalette(sourceImage[, colorCount, quality])
returns [ [num, num, num], [num, num, num], ... ]
</em>/
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/color-thief/color-thief.gif" alt="color-thief" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fp-dom]]></title>
    <link href="http://nmotw.in/github/fp-dom/"/>
    <updated>2016-01-14T16:52:27+00:00</updated>
    <id>http://nmotw.in/github/fp-dom</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fp-dom">fp-dom</a></h1>

<blockquote><p>A collection of functions to favor functional programming in a DOM context.</p></blockquote>

<p>DOM operations in a functional way with <code>fp-dom</code>, it provides support for the below methods:</p>

<ul>
<li>animate</li>
<li>append</li>
<li>addClass</li>
<li>removeClass</li>
<li>toggleClass</li>
<li>hasClass</li>
<li>contains</li>
<li>elem</li>
<li>insertAfter</li>
<li>insertBefore</li>
<li>interval</li>
<li>isdom</li>
<li>isvdom</li>
<li>listen</li>
<li>prepend</li>
<li>replace</li>
<li>select</li>
<li>selectOne</li>
<li>setattr</li>
<li>timeout</li>
<li>velem</li>
</ul>


<p><strong>Get it</strong>: <code>npm install --save fp-dom</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
fpdom = require('fp-dom');
let appendtoBody = fpdom.append(document.body),
  h1 = fpdom.elem('h1','meow');</p>

<p>appendtoBody(h1);
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/fp-dom/fp-dom.gif" alt="fp-dom" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[notie]]></title>
    <link href="http://nmotw.in/github/notie/"/>
    <updated>2015-11-19T09:56:38+00:00</updated>
    <id>http://nmotw.in/github/notie</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/notie">notie</a></h1>

<blockquote><p>A simple notification plugin.</p></blockquote>

<p><code>notie</code> - A clean and simple notification plugin with alert/growl style, has no dependencies, help us to take an input,
confirmation or alter the users in a more appealing manner.</p>

<p>It's uses material design, you can override or add styling in a separate <code>.css</code> file.</p>

<p><strong>Get it:</strong> <code>npm install --save notie</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var notie = require('notie);</p>

<p>notie.alert(style_number, 'message', time_in_seconds);</p>

<p>notie.confirm('Title text', 'Yes button text', 'No button text', yes_callback);</p>

<p>notie.input('Title text', 'Submit button text', 'Cancel button text', 'type', 'placeholder', submit_callback, 'Optional pre-filled value');
```</p>

<p>```js
notie.input('What city do you live in?', 'Submit', 'Cancel', 'text', 'Enter your city:', function(value_entered) {</p>

<pre><code>notie.alert(1, 'You entered: ' + value_entered, 2);
</code></pre>

<p>}, 'New York');
```</p>

<p>P.S: <code>style_number</code> -> <code>{1,2,3,4}</code> &lt;=> <code>{Success, Warning, Error, Information}</code></p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/notie/notie.gif" alt="notie" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clipboard.js]]></title>
    <link href="http://nmotw.in/github/clipboard.js/"/>
    <updated>2015-10-01T12:50:14+00:00</updated>
    <id>http://nmotw.in/github/clipboard.js</id>
    <content type="html"><![CDATA[<h1><a href="http://zenorocha.github.io/clipboard.js/">clipboard.js</a></h1>

<blockquote><p>A modern approach to copy text to clipboard!</p></blockquote>

<p>With 4.7K+ stars to it's repo with a modern approach to copy text coded with <code>ES2015/6</code> classes,  No Flash. Just 2kb!</p>

<p><a href="http://zenorocha.com/">Zeno Rocha</a>'s <code>clipboard.js</code> undoubtedly is the nmotw!</p>

<p>It makes use of  <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection">Selection</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand">execCommand</a> APIs.</p>

<p><strong>Get it:</strong> <code>npm install --save clipboard.js</code></p>

<p><strong>Sample usage:</strong>_</p>

<p>```js
var clipboard = new Clipboard('.btn');</p>

<p>clipboard.on('success', function(e) {</p>

<pre><code>console.info('Action:', e.action);
console.info('Text:', e.text);
console.info('Trigger:', e.trigger);

e.clearSelection();
</code></pre>

<p>});</p>

<p>clipboard.on('error', function(e) {</p>

<pre><code>console.error('Action:', e.action);
console.error('Trigger:', e.trigger);
</code></pre>

<p>});
```</p>

<p>In your <code>HTML</code>:</p>

<p>```html</p>

<!-- Target -->


<p><input id="foo" value="https://github.com/zenorocha/clipboard.js.git"></p>

<!-- Trigger -->


<p><button class="btn" data-clipboard-target="#foo"></p>

<pre><code>&lt;img src="assets/clippy.svg" alt="Copy to clipboard"&gt;
</code></pre>

<p></button>
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/clipboard.js/clipboard.js.gif" alt="clipboard.js" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[combokeys]]></title>
    <link href="http://nmotw.in/github/combokeys/"/>
    <updated>2015-07-23T14:32:46+00:00</updated>
    <id>http://nmotw.in/github/combokeys</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/combokeys">combokeys</a></p>

<blockquote><p>Handles keyboard shortcuts in the browser.</p></blockquote>

<p><code>combokeys</code> is a fork of <a href="https://github.com/ccampbell/mousetrap">ccampbell/mousetrap</a> with two main changes:</p>

<ul>
<li>Refactored as CommonJS</li>
<li>Doesn't automatically listen on the document. Instead, it is now a constructor and the element on which to listen must be provided on instantiation.</li>
</ul>


<p><strong>Install it:</strong> <code>npm install --save combokeys</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var Combokeys = require("combokeys");
var Mousetrap = new Combokeys(document.documentElement);
// Or, instantiate it for one or more specific elements:
var firstCombokeys = new Combokeys(document.getElementById("first"));</p>

<p>firstCombokeys.bind('4', function() { console.log('4'); });
firstCombokeys.bind("?", function() { console.log('show shortcuts!'); });</p>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/combokeys/combokeys.gif" alt="combokeys" /></p>

<p>Thanks to <a href="https://github.com/mightyiam">Shahar Or</a> for porting <code>mousetrap</code> to <code>combokeys</code>.</p>
]]></content>
  </entry>
  
</feed>
